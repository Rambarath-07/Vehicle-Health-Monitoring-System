
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000238c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025f4  080025f4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080025f4  080025f4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025f4  080025f4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f8  080025f8  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080025fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000060  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000475a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001086  00000000  00000000  000247f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000360  00000000  00000000  00025878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002b8  00000000  00000000  00025bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001829e  00000000  00000000  00025e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000046b1  00000000  00000000  0003e12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082eb5  00000000  00000000  000427df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c5694  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ed4  00000000  00000000  000c56e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002524 	.word	0x08002524

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002524 	.word	0x08002524

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	; (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <GPIO_Init>:
 * is now responsible for all buzzer timing and control.
 */

/* === GPIO Configuration === */
void GPIO_Init(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
    /* Enable GPIOC clock (GPIOA is no longer needed for the IR sensor) */
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <GPIO_Init+0x40>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <GPIO_Init+0x40>)
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	6313      	str	r3, [r2, #48]	; 0x30

    /* PC2 as input (IR sensor) */
    // Set PC2 to input mode
    GPIOC->MODER &= ~(0x3U << (IR_SENSOR_PIN * 2));
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <GPIO_Init+0x44>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <GPIO_Init+0x44>)
 80002e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80002e6:	6013      	str	r3, [r2, #0]
     * Buzzer pin (PC9) configuration is already handled in the gpio_init()
     * function within main.c. Defining it here is redundant but harmless
     * as long as the settings are the same. For clarity, it's best to
     * initialize each peripheral's pins only once in a central location.
     */
    GPIOC->MODER &= ~(0x3U << (BUZZER_PIN * 2));
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <GPIO_Init+0x44>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a08      	ldr	r2, [pc, #32]	; (8000310 <GPIO_Init+0x44>)
 80002ee:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80002f2:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (0x1U << (BUZZER_PIN * 2));      // output mode
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <GPIO_Init+0x44>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <GPIO_Init+0x44>)
 80002fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002fe:	6013      	str	r3, [r2, #0]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	40020800 	.word	0x40020800

08000314 <TIM2_Init>:

/* === Timer2 Configuration === */
void TIM2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    /* Enable TIM2 clock */
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <TIM2_Init+0x4c>)
 800031a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800031c:	4a10      	ldr	r2, [pc, #64]	; (8000360 <TIM2_Init+0x4c>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6413      	str	r3, [r2, #64]	; 0x40
     * System Clock: 84 MHz (Assumed)
     * Prescaler: 8399 -> Timer Clock = 84 MHz / (8399 + 1) = 10 kHz
     * Auto-Reload Register: 99 -> Interrupt Freq = 10 kHz / (99 + 1) = 100 Hz
     * Interrupt Period = 1 / 100 Hz = 10 ms
     */
    TIM2->PSC = 8399;
 8000324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000328:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 99;
 800032e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000332:	2263      	movs	r2, #99	; 0x63
 8000334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Update Interrupt */
    TIM2->DIER |= TIM_DIER_UIE;
 8000336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	60d3      	str	r3, [r2, #12]

    /* Enable TIM2 Counter */
    TIM2->CR1 |= TIM_CR1_CEN;
 8000346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6013      	str	r3, [r2, #0]

    /* Enable TIM2 IRQ in the NVIC */
    NVIC_EnableIRQ(TIM2_IRQn);
 8000356:	201c      	movs	r0, #28
 8000358:	f7ff ff9a 	bl	8000290 <__NVIC_EnableIRQ>
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40023800 	.word	0x40023800

08000364 <TIM2_IRQHandler>:

/* === Timer2 ISR: Detects Object and Sets a Flag === */
void TIM2_IRQHandler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
    // Check if the update interrupt flag is set
    if (TIM2->SR & TIM_SR_UIF)
 8000368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	2b00      	cmp	r3, #0
 8000374:	d010      	beq.n	8000398 <TIM2_IRQHandler+0x34>
    {
        // Clear the update interrupt flag to prevent re-entry
        TIM2->SR &= ~TIM_SR_UIF;
 8000376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6113      	str	r3, [r2, #16]

        // Check the state of the IR sensor pin PC2
        if ((GPIOC->IDR & (1 << IR_SENSOR_PIN)) == 0)
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <TIM2_IRQHandler+0x40>)
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	f003 0304 	and.w	r3, r3, #4
 800038e:	2b00      	cmp	r3, #0
 8000390:	d102      	bne.n	8000398 <TIM2_IRQHandler+0x34>
        {
            // Set the global flag. The main loop will see this and take action.
            object_detected = 1;
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <TIM2_IRQHandler+0x44>)
 8000394:	2201      	movs	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40020800 	.word	0x40020800
 80003a8:	20000084 	.word	0x20000084

080003ac <RFID_delay_ms>:
static void rc522_init(void);
static uint8_t rc522_scan_internal(uint8_t *id);
// ... and all other helper functions

/* --- Delay function --- */
void RFID_delay_ms(uint32_t ms) {
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 8000; i++) {
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	e003      	b.n	80003c2 <RFID_delay_ms+0x16>
        __asm__("nop");
 80003ba:	bf00      	nop
    for (volatile uint32_t i = 0; i < ms * 8000; i++) {
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	3301      	adds	r3, #1
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80003c8:	fb03 f202 	mul.w	r2, r3, r2
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d8f3      	bhi.n	80003ba <RFID_delay_ms+0xe>
    }
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <rc522_cs_low>:

/* --- Low-Level Hardware and Register Functions (Static) --- */
static inline void rc522_cs_low(void) { GPIOA->BSRR = (RC522_CS_PIN << 16); }
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <rc522_cs_low+0x18>)
 80003e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003ea:	619a      	str	r2, [r3, #24]
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40020000 	.word	0x40020000

080003fc <rc522_cs_high>:
static inline void rc522_cs_high(void) { GPIOA->BSRR = RC522_CS_PIN; }
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <rc522_cs_high+0x14>)
 8000402:	2210      	movs	r2, #16
 8000404:	619a      	str	r2, [r3, #24]
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40020000 	.word	0x40020000

08000414 <spi1_transfer>:

static uint8_t spi1_transfer(uint8_t data) {
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));
 800041e:	bf00      	nop
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <spi1_transfer+0x40>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	f003 0302 	and.w	r3, r3, #2
 8000428:	2b00      	cmp	r3, #0
 800042a:	d0f9      	beq.n	8000420 <spi1_transfer+0xc>
    *(volatile uint8_t*)&SPI1->DR = data;
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <spi1_transfer+0x44>)
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	7013      	strb	r3, [r2, #0]
    while (!(SPI1->SR & SPI_SR_RXNE));
 8000432:	bf00      	nop
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <spi1_transfer+0x40>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f9      	beq.n	8000434 <spi1_transfer+0x20>
    return *(volatile uint8_t*)&SPI1->DR;
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <spi1_transfer+0x44>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	b2db      	uxtb	r3, r3
}
 8000446:	4618      	mov	r0, r3
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40013000 	.word	0x40013000
 8000458:	4001300c 	.word	0x4001300c

0800045c <rc522_write_reg>:

static void rc522_write_reg(uint8_t reg, uint8_t val) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	460a      	mov	r2, r1
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	4613      	mov	r3, r2
 800046a:	71bb      	strb	r3, [r7, #6]
    rc522_cs_low();
 800046c:	f7ff ffb8 	bl	80003e0 <rc522_cs_low>
    spi1_transfer((reg << 1) & 0x7E);
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800047a:	b2db      	uxtb	r3, r3
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ffc9 	bl	8000414 <spi1_transfer>
    spi1_transfer(val);
 8000482:	79bb      	ldrb	r3, [r7, #6]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ffc5 	bl	8000414 <spi1_transfer>
    rc522_cs_high();
 800048a:	f7ff ffb7 	bl	80003fc <rc522_cs_high>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <rc522_read_reg>:

static uint8_t rc522_read_reg(uint8_t reg) {
 8000496:	b580      	push	{r7, lr}
 8000498:	b084      	sub	sp, #16
 800049a:	af00      	add	r7, sp, #0
 800049c:	4603      	mov	r3, r0
 800049e:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    rc522_cs_low();
 80004a0:	f7ff ff9e 	bl	80003e0 <rc522_cs_low>
    spi1_transfer(((reg << 1) & 0x7E) | 0x80);
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004b4:	b25b      	sxtb	r3, r3
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ffab 	bl	8000414 <spi1_transfer>
    val = spi1_transfer(0x00);
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ffa8 	bl	8000414 <spi1_transfer>
 80004c4:	4603      	mov	r3, r0
 80004c6:	73fb      	strb	r3, [r7, #15]
    rc522_cs_high();
 80004c8:	f7ff ff98 	bl	80003fc <rc522_cs_high>
    return val;
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <rc522_set_bit_mask>:

static void rc522_set_bit_mask(uint8_t reg, uint8_t mask) {
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	4603      	mov	r3, r0
 80004de:	460a      	mov	r2, r1
 80004e0:	71fb      	strb	r3, [r7, #7]
 80004e2:	4613      	mov	r3, r2
 80004e4:	71bb      	strb	r3, [r7, #6]
    rc522_write_reg(reg, rc522_read_reg(reg) | mask);
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ffd4 	bl	8000496 <rc522_read_reg>
 80004ee:	4603      	mov	r3, r0
 80004f0:	461a      	mov	r2, r3
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4611      	mov	r1, r2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ffad 	bl	800045c <rc522_write_reg>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <rc522_clear_bit_mask>:

static void rc522_clear_bit_mask(uint8_t reg, uint8_t mask) {
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	4603      	mov	r3, r0
 8000512:	460a      	mov	r2, r1
 8000514:	71fb      	strb	r3, [r7, #7]
 8000516:	4613      	mov	r3, r2
 8000518:	71bb      	strb	r3, [r7, #6]
    rc522_write_reg(reg, rc522_read_reg(reg) & (~mask));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ffba 	bl	8000496 <rc522_read_reg>
 8000522:	4603      	mov	r3, r0
 8000524:	b25a      	sxtb	r2, r3
 8000526:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800052a:	43db      	mvns	r3, r3
 800052c:	b25b      	sxtb	r3, r3
 800052e:	4013      	ands	r3, r2
 8000530:	b25b      	sxtb	r3, r3
 8000532:	b2da      	uxtb	r2, r3
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff8f 	bl	800045c <rc522_write_reg>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <rc522_reset>:

static void rc522_reset(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
    GPIOB->BSRR = (RC522_RST_PIN << 16);
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <rc522_reset+0x24>)
 800054e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000552:	619a      	str	r2, [r3, #24]
    RFID_delay_ms(10);
 8000554:	200a      	movs	r0, #10
 8000556:	f7ff ff29 	bl	80003ac <RFID_delay_ms>
    GPIOB->BSRR = RC522_RST_PIN;
 800055a:	4b04      	ldr	r3, [pc, #16]	; (800056c <rc522_reset+0x24>)
 800055c:	2202      	movs	r2, #2
 800055e:	619a      	str	r2, [r3, #24]
    RFID_delay_ms(50);
 8000560:	2032      	movs	r0, #50	; 0x32
 8000562:	f7ff ff23 	bl	80003ac <RFID_delay_ms>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40020400 	.word	0x40020400

08000570 <rc522_init>:

static void rc522_init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    debug_status = 0;
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <rc522_init+0x80>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
    rc522_reset();
 800057a:	f7ff ffe5 	bl	8000548 <rc522_reset>
    rc522_write_reg(CommandReg, PCD_SOFTRESET);
 800057e:	210f      	movs	r1, #15
 8000580:	2001      	movs	r0, #1
 8000582:	f7ff ff6b 	bl	800045c <rc522_write_reg>
    RFID_delay_ms(50);
 8000586:	2032      	movs	r0, #50	; 0x32
 8000588:	f7ff ff10 	bl	80003ac <RFID_delay_ms>
    while (rc522_read_reg(CommandReg) & (1 << 4));
 800058c:	bf00      	nop
 800058e:	2001      	movs	r0, #1
 8000590:	f7ff ff81 	bl	8000496 <rc522_read_reg>
 8000594:	4603      	mov	r3, r0
 8000596:	f003 0310 	and.w	r3, r3, #16
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1f7      	bne.n	800058e <rc522_init+0x1e>
    rc522_version = rc522_read_reg(VersionReg);
 800059e:	2037      	movs	r0, #55	; 0x37
 80005a0:	f7ff ff79 	bl	8000496 <rc522_read_reg>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <rc522_init+0x84>)
 80005aa:	701a      	strb	r2, [r3, #0]
    rc522_write_reg(TModeReg, 0x8D);
 80005ac:	218d      	movs	r1, #141	; 0x8d
 80005ae:	202a      	movs	r0, #42	; 0x2a
 80005b0:	f7ff ff54 	bl	800045c <rc522_write_reg>
    rc522_write_reg(TPrescalerReg, 0x3E);
 80005b4:	213e      	movs	r1, #62	; 0x3e
 80005b6:	202b      	movs	r0, #43	; 0x2b
 80005b8:	f7ff ff50 	bl	800045c <rc522_write_reg>
    rc522_write_reg(TReloadRegL, 0x1E);
 80005bc:	211e      	movs	r1, #30
 80005be:	202d      	movs	r0, #45	; 0x2d
 80005c0:	f7ff ff4c 	bl	800045c <rc522_write_reg>
    rc522_write_reg(TReloadRegH, 0x00);
 80005c4:	2100      	movs	r1, #0
 80005c6:	202c      	movs	r0, #44	; 0x2c
 80005c8:	f7ff ff48 	bl	800045c <rc522_write_reg>
    rc522_write_reg(TxAutoReg, 0x40);
 80005cc:	2140      	movs	r1, #64	; 0x40
 80005ce:	2015      	movs	r0, #21
 80005d0:	f7ff ff44 	bl	800045c <rc522_write_reg>
    rc522_write_reg(ModeReg, 0x3D);
 80005d4:	213d      	movs	r1, #61	; 0x3d
 80005d6:	2011      	movs	r0, #17
 80005d8:	f7ff ff40 	bl	800045c <rc522_write_reg>
    rc522_set_bit_mask(TxControlReg, 0x03);
 80005dc:	2103      	movs	r1, #3
 80005de:	2014      	movs	r0, #20
 80005e0:	f7ff ff79 	bl	80004d6 <rc522_set_bit_mask>
    debug_status = 1;
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <rc522_init+0x80>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000093 	.word	0x20000093
 80005f4:	20000092 	.word	0x20000092

080005f8 <rc522_to_card>:

static uint8_t rc522_to_card(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen) {
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	4613      	mov	r3, r2
 8000608:	73bb      	strb	r3, [r7, #14]
    uint8_t status = 0, irqEn = 0x00, waitIRq = 0x00, lastBits, n;
 800060a:	2300      	movs	r3, #0
 800060c:	75fb      	strb	r3, [r7, #23]
 800060e:	2300      	movs	r3, #0
 8000610:	75bb      	strb	r3, [r7, #22]
 8000612:	2300      	movs	r3, #0
 8000614:	757b      	strb	r3, [r7, #21]
    uint16_t i;
    if (command == PCD_TRANSCEIVE) {
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2b0c      	cmp	r3, #12
 800061a:	d103      	bne.n	8000624 <rc522_to_card+0x2c>
        irqEn = 0x77;
 800061c:	2377      	movs	r3, #119	; 0x77
 800061e:	75bb      	strb	r3, [r7, #22]
        waitIRq = 0x30;
 8000620:	2330      	movs	r3, #48	; 0x30
 8000622:	757b      	strb	r3, [r7, #21]
    }
    rc522_write_reg(ComIEnReg, irqEn | 0x80);
 8000624:	7dbb      	ldrb	r3, [r7, #22]
 8000626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4619      	mov	r1, r3
 800062e:	2002      	movs	r0, #2
 8000630:	f7ff ff14 	bl	800045c <rc522_write_reg>
    rc522_write_reg(ComIrqReg, 0x7F);
 8000634:	217f      	movs	r1, #127	; 0x7f
 8000636:	2004      	movs	r0, #4
 8000638:	f7ff ff10 	bl	800045c <rc522_write_reg>
    rc522_set_bit_mask(FIFOLevelReg, 0x80);
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	200a      	movs	r0, #10
 8000640:	f7ff ff49 	bl	80004d6 <rc522_set_bit_mask>
    rc522_write_reg(CommandReg, PCD_IDLE);
 8000644:	2100      	movs	r1, #0
 8000646:	2001      	movs	r0, #1
 8000648:	f7ff ff08 	bl	800045c <rc522_write_reg>
    for (i = 0; i < sendLen; i++) rc522_write_reg(FIFODataReg, sendData[i]);
 800064c:	2300      	movs	r3, #0
 800064e:	827b      	strh	r3, [r7, #18]
 8000650:	e00a      	b.n	8000668 <rc522_to_card+0x70>
 8000652:	8a7b      	ldrh	r3, [r7, #18]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	2009      	movs	r0, #9
 800065e:	f7ff fefd 	bl	800045c <rc522_write_reg>
 8000662:	8a7b      	ldrh	r3, [r7, #18]
 8000664:	3301      	adds	r3, #1
 8000666:	827b      	strh	r3, [r7, #18]
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	b29b      	uxth	r3, r3
 800066c:	8a7a      	ldrh	r2, [r7, #18]
 800066e:	429a      	cmp	r2, r3
 8000670:	d3ef      	bcc.n	8000652 <rc522_to_card+0x5a>
    rc522_write_reg(CommandReg, command);
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	4619      	mov	r1, r3
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff fef0 	bl	800045c <rc522_write_reg>
    if (command == PCD_TRANSCEIVE) rc522_set_bit_mask(BitFramingReg, 0x80);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	2b0c      	cmp	r3, #12
 8000680:	d103      	bne.n	800068a <rc522_to_card+0x92>
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	200d      	movs	r0, #13
 8000686:	f7ff ff26 	bl	80004d6 <rc522_set_bit_mask>
    i = 2000;
 800068a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800068e:	827b      	strh	r3, [r7, #18]
    do {
        n = rc522_read_reg(ComIrqReg);
 8000690:	2004      	movs	r0, #4
 8000692:	f7ff ff00 	bl	8000496 <rc522_read_reg>
 8000696:	4603      	mov	r3, r0
 8000698:	753b      	strb	r3, [r7, #20]
        i--;
 800069a:	8a7b      	ldrh	r3, [r7, #18]
 800069c:	3b01      	subs	r3, #1
 800069e:	827b      	strh	r3, [r7, #18]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 80006a0:	8a7b      	ldrh	r3, [r7, #18]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00a      	beq.n	80006bc <rc522_to_card+0xc4>
 80006a6:	7d3b      	ldrb	r3, [r7, #20]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <rc522_to_card+0xc4>
 80006b0:	7d3a      	ldrb	r2, [r7, #20]
 80006b2:	7d7b      	ldrb	r3, [r7, #21]
 80006b4:	4013      	ands	r3, r2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0e9      	beq.n	8000690 <rc522_to_card+0x98>
    rc522_clear_bit_mask(BitFramingReg, 0x80);
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	200d      	movs	r0, #13
 80006c0:	f7ff ff23 	bl	800050a <rc522_clear_bit_mask>
    if (i != 0 && !(rc522_read_reg(ErrorReg) & 0x1B)) {
 80006c4:	8a7b      	ldrh	r3, [r7, #18]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d052      	beq.n	8000770 <rc522_to_card+0x178>
 80006ca:	2006      	movs	r0, #6
 80006cc:	f7ff fee3 	bl	8000496 <rc522_read_reg>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f003 031b 	and.w	r3, r3, #27
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d14a      	bne.n	8000770 <rc522_to_card+0x178>
        status = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	75fb      	strb	r3, [r7, #23]
        if (n & irqEn & 0x01) status = 0;
 80006de:	7d3a      	ldrb	r2, [r7, #20]
 80006e0:	7dbb      	ldrb	r3, [r7, #22]
 80006e2:	4013      	ands	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <rc522_to_card+0xfa>
 80006ee:	2300      	movs	r3, #0
 80006f0:	75fb      	strb	r3, [r7, #23]
        if (command == PCD_TRANSCEIVE) {
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	2b0c      	cmp	r3, #12
 80006f6:	d13b      	bne.n	8000770 <rc522_to_card+0x178>
            n = rc522_read_reg(FIFOLevelReg);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f7ff fecc 	bl	8000496 <rc522_read_reg>
 80006fe:	4603      	mov	r3, r0
 8000700:	753b      	strb	r3, [r7, #20]
            lastBits = rc522_read_reg(ControlReg) & 0x07;
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff fec7 	bl	8000496 <rc522_read_reg>
 8000708:	4603      	mov	r3, r0
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	747b      	strb	r3, [r7, #17]
            *backLen = (lastBits) ? (n - 1) * 8 + lastBits : n * 8;
 8000710:	7c7b      	ldrb	r3, [r7, #17]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d009      	beq.n	800072a <rc522_to_card+0x132>
 8000716:	7d3b      	ldrb	r3, [r7, #20]
 8000718:	3b01      	subs	r3, #1
 800071a:	b29b      	uxth	r3, r3
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	b29a      	uxth	r2, r3
 8000720:	7c7b      	ldrb	r3, [r7, #17]
 8000722:	b29b      	uxth	r3, r3
 8000724:	4413      	add	r3, r2
 8000726:	b29b      	uxth	r3, r3
 8000728:	e003      	b.n	8000732 <rc522_to_card+0x13a>
 800072a:	7d3b      	ldrb	r3, [r7, #20]
 800072c:	b29b      	uxth	r3, r3
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	b29b      	uxth	r3, r3
 8000732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000734:	8013      	strh	r3, [r2, #0]
            if (n == 0) n = 1;
 8000736:	7d3b      	ldrb	r3, [r7, #20]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <rc522_to_card+0x148>
 800073c:	2301      	movs	r3, #1
 800073e:	753b      	strb	r3, [r7, #20]
            if (n > 16) n = 16;
 8000740:	7d3b      	ldrb	r3, [r7, #20]
 8000742:	2b10      	cmp	r3, #16
 8000744:	d901      	bls.n	800074a <rc522_to_card+0x152>
 8000746:	2310      	movs	r3, #16
 8000748:	753b      	strb	r3, [r7, #20]
            for (i = 0; i < n; i++) backData[i] = rc522_read_reg(FIFODataReg);
 800074a:	2300      	movs	r3, #0
 800074c:	827b      	strh	r3, [r7, #18]
 800074e:	e00a      	b.n	8000766 <rc522_to_card+0x16e>
 8000750:	8a7b      	ldrh	r3, [r7, #18]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	18d4      	adds	r4, r2, r3
 8000756:	2009      	movs	r0, #9
 8000758:	f7ff fe9d 	bl	8000496 <rc522_read_reg>
 800075c:	4603      	mov	r3, r0
 800075e:	7023      	strb	r3, [r4, #0]
 8000760:	8a7b      	ldrh	r3, [r7, #18]
 8000762:	3301      	adds	r3, #1
 8000764:	827b      	strh	r3, [r7, #18]
 8000766:	7d3b      	ldrb	r3, [r7, #20]
 8000768:	b29b      	uxth	r3, r3
 800076a:	8a7a      	ldrh	r2, [r7, #18]
 800076c:	429a      	cmp	r2, r3
 800076e:	d3ef      	bcc.n	8000750 <rc522_to_card+0x158>
        }
    }
    return status;
 8000770:	7dfb      	ldrb	r3, [r7, #23]
}
 8000772:	4618      	mov	r0, r3
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}

0800077a <rc522_request>:

static uint8_t rc522_request(uint8_t reqMode, uint8_t *TagType) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af02      	add	r7, sp, #8
 8000780:	4603      	mov	r3, r0
 8000782:	6039      	str	r1, [r7, #0]
 8000784:	71fb      	strb	r3, [r7, #7]
    uint16_t backBits;
    rc522_write_reg(BitFramingReg, 0x07);
 8000786:	2107      	movs	r1, #7
 8000788:	200d      	movs	r0, #13
 800078a:	f7ff fe67 	bl	800045c <rc522_write_reg>
    TagType[0] = reqMode;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	79fa      	ldrb	r2, [r7, #7]
 8000792:	701a      	strb	r2, [r3, #0]
    if (rc522_to_card(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits) != 1 || backBits != 0x10) return 0;
 8000794:	f107 030e 	add.w	r3, r7, #14
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2201      	movs	r2, #1
 800079e:	6839      	ldr	r1, [r7, #0]
 80007a0:	200c      	movs	r0, #12
 80007a2:	f7ff ff29 	bl	80005f8 <rc522_to_card>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d102      	bne.n	80007b2 <rc522_request+0x38>
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	2b10      	cmp	r3, #16
 80007b0:	d001      	beq.n	80007b6 <rc522_request+0x3c>
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <rc522_request+0x3e>
    return 1;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <rc522_anticoll>:

static uint8_t rc522_anticoll(uint8_t *serNum) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	6078      	str	r0, [r7, #4]
    uint16_t unLen;
    uint8_t serNumCheck = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
    rc522_write_reg(BitFramingReg, 0x00);
 80007cc:	2100      	movs	r1, #0
 80007ce:	200d      	movs	r0, #13
 80007d0:	f7ff fe44 	bl	800045c <rc522_write_reg>
    serNum[0] = PICC_ANTICOLL;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2293      	movs	r2, #147	; 0x93
 80007d8:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3301      	adds	r3, #1
 80007de:	2220      	movs	r2, #32
 80007e0:	701a      	strb	r2, [r3, #0]
    if (rc522_to_card(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen) == 1) {
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2202      	movs	r2, #2
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	200c      	movs	r0, #12
 80007f0:	f7ff ff02 	bl	80005f8 <rc522_to_card>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d119      	bne.n	800082e <rc522_anticoll+0x6e>
        for (uint8_t i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 80007fa:	2300      	movs	r3, #0
 80007fc:	73bb      	strb	r3, [r7, #14]
 80007fe:	e009      	b.n	8000814 <rc522_anticoll+0x54>
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	4053      	eors	r3, r2
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	3301      	adds	r3, #1
 8000812:	73bb      	strb	r3, [r7, #14]
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	2b03      	cmp	r3, #3
 8000818:	d9f2      	bls.n	8000800 <rc522_anticoll+0x40>
        if (serNumCheck != serNum[4]) return 0;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3304      	adds	r3, #4
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	7bfa      	ldrb	r2, [r7, #15]
 8000822:	429a      	cmp	r2, r3
 8000824:	d001      	beq.n	800082a <rc522_anticoll+0x6a>
 8000826:	2300      	movs	r3, #0
 8000828:	e002      	b.n	8000830 <rc522_anticoll+0x70>
        return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <rc522_anticoll+0x70>
    }
    return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <rc522_scan_internal>:

static uint8_t rc522_scan_internal(uint8_t *id) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    debug_status = 2;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <rc522_scan_internal+0x3c>)
 8000842:	2202      	movs	r2, #2
 8000844:	701a      	strb	r2, [r3, #0]
    if (rc522_request(PICC_REQIDL, id) == 1 && rc522_anticoll(id) == 1) {
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	2026      	movs	r0, #38	; 0x26
 800084a:	f7ff ff96 	bl	800077a <rc522_request>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d10a      	bne.n	800086a <rc522_scan_internal+0x32>
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ffb3 	bl	80007c0 <rc522_anticoll>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d104      	bne.n	800086a <rc522_scan_internal+0x32>
        debug_status = 3;
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <rc522_scan_internal+0x3c>)
 8000862:	2203      	movs	r2, #3
 8000864:	701a      	strb	r2, [r3, #0]
        return 1;
 8000866:	2301      	movs	r3, #1
 8000868:	e000      	b.n	800086c <rc522_scan_internal+0x34>
    }
    return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000093 	.word	0x20000093

08000878 <RFID_Init>:


/* --- Public Function Implementations --- */

void RFID_Init(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    rc522_init();
 800087c:	f7ff fe78 	bl	8000570 <rc522_init>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <RFID_Scan>:

uint8_t RFID_Scan(uint64_t* uid_val, char* uid_str) {
 8000884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000888:	b099      	sub	sp, #100	; 0x64
 800088a:	af04      	add	r7, sp, #16
 800088c:	6478      	str	r0, [r7, #68]	; 0x44
 800088e:	6439      	str	r1, [r7, #64]	; 0x40
    uint8_t card_id[5];
    if (rc522_scan_internal(card_id)) {
 8000890:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ffcf 	bl	8000838 <rc522_scan_internal>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	f000 80ab 	beq.w	80009f8 <RFID_Scan+0x174>
        // Copy to internal buffer for safety
        memcpy(scannedUID_internal, card_id, 5);
 80008a2:	4b58      	ldr	r3, [pc, #352]	; (8000a04 <RFID_Scan+0x180>)
 80008a4:	461a      	mov	r2, r3
 80008a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008ae:	6010      	str	r0, [r2, #0]
 80008b0:	3204      	adds	r2, #4
 80008b2:	7011      	strb	r1, [r2, #0]

        // Format UID into a hex string for the user
        sprintf(uid_str, "%02X%02X%02X%02X%02X",
                scannedUID_internal[0], scannedUID_internal[1],
 80008b4:	4b53      	ldr	r3, [pc, #332]	; (8000a04 <RFID_Scan+0x180>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
        sprintf(uid_str, "%02X%02X%02X%02X%02X",
 80008b8:	461e      	mov	r6, r3
                scannedUID_internal[0], scannedUID_internal[1],
 80008ba:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <RFID_Scan+0x180>)
 80008bc:	785b      	ldrb	r3, [r3, #1]
        sprintf(uid_str, "%02X%02X%02X%02X%02X",
 80008be:	4618      	mov	r0, r3
                scannedUID_internal[2], scannedUID_internal[3], scannedUID_internal[4]);
 80008c0:	4b50      	ldr	r3, [pc, #320]	; (8000a04 <RFID_Scan+0x180>)
 80008c2:	789b      	ldrb	r3, [r3, #2]
        sprintf(uid_str, "%02X%02X%02X%02X%02X",
 80008c4:	4619      	mov	r1, r3
                scannedUID_internal[2], scannedUID_internal[3], scannedUID_internal[4]);
 80008c6:	4b4f      	ldr	r3, [pc, #316]	; (8000a04 <RFID_Scan+0x180>)
 80008c8:	78db      	ldrb	r3, [r3, #3]
        sprintf(uid_str, "%02X%02X%02X%02X%02X",
 80008ca:	461a      	mov	r2, r3
                scannedUID_internal[2], scannedUID_internal[3], scannedUID_internal[4]);
 80008cc:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <RFID_Scan+0x180>)
 80008ce:	791b      	ldrb	r3, [r3, #4]
        sprintf(uid_str, "%02X%02X%02X%02X%02X",
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	9201      	str	r2, [sp, #4]
 80008d4:	9100      	str	r1, [sp, #0]
 80008d6:	4603      	mov	r3, r0
 80008d8:	4632      	mov	r2, r6
 80008da:	494b      	ldr	r1, [pc, #300]	; (8000a08 <RFID_Scan+0x184>)
 80008dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80008de:	f001 f9b3 	bl	8001c48 <siprintf>

        // Convert UID to a single numerical value for the user
        *uid_val = 0;
 80008e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80008e4:	f04f 0200 	mov.w	r2, #0
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	e9c1 2300 	strd	r2, r3, [r1]
        *uid_val |= (uint64_t)scannedUID_internal[0] << 32;
 80008f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008f6:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <RFID_Scan+0x180>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
 8000900:	637a      	str	r2, [r7, #52]	; 0x34
 8000902:	f04f 0200 	mov.w	r2, #0
 8000906:	f04f 0300 	mov.w	r3, #0
 800090a:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800090c:	0033      	movs	r3, r6
 800090e:	2200      	movs	r2, #0
 8000910:	ea40 0602 	orr.w	r6, r0, r2
 8000914:	62be      	str	r6, [r7, #40]	; 0x28
 8000916:	430b      	orrs	r3, r1
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800091a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800091c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000920:	e9c3 1200 	strd	r1, r2, [r3]
        *uid_val |= (uint64_t)scannedUID_internal[1] << 24;
 8000924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800092a:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <RFID_Scan+0x180>)
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2200      	movs	r2, #0
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
 8000934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000938:	0a1d      	lsrs	r5, r3, #8
 800093a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800093c:	061c      	lsls	r4, r3, #24
 800093e:	ea40 0304 	orr.w	r3, r0, r4
 8000942:	623b      	str	r3, [r7, #32]
 8000944:	ea41 0305 	orr.w	r3, r1, r5
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
 800094a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800094c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000950:	e9c3 1200 	strd	r1, r2, [r3]
        *uid_val |= (uint64_t)scannedUID_internal[2] << 16;
 8000954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <RFID_Scan+0x180>)
 800095c:	789b      	ldrb	r3, [r3, #2]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2200      	movs	r2, #0
 8000962:	4698      	mov	r8, r3
 8000964:	4691      	mov	r9, r2
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	f04f 0300 	mov.w	r3, #0
 800096e:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8000972:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8000976:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800097a:	ea40 0402 	orr.w	r4, r0, r2
 800097e:	61bc      	str	r4, [r7, #24]
 8000980:	430b      	orrs	r3, r1
 8000982:	61fb      	str	r3, [r7, #28]
 8000984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000986:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800098a:	e9c3 1200 	strd	r1, r2, [r3]
        *uid_val |= (uint64_t)scannedUID_internal[3] << 8;
 800098e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <RFID_Scan+0x180>)
 8000996:	78db      	ldrb	r3, [r3, #3]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2200      	movs	r2, #0
 800099c:	469a      	mov	sl, r3
 800099e:	4693      	mov	fp, r2
 80009a0:	f04f 0200 	mov.w	r2, #0
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80009ac:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80009b0:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80009b4:	ea40 0402 	orr.w	r4, r0, r2
 80009b8:	613c      	str	r4, [r7, #16]
 80009ba:	430b      	orrs	r3, r1
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80009c4:	e9c3 1200 	strd	r1, r2, [r3]
        *uid_val |= (uint64_t)scannedUID_internal[4];
 80009c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <RFID_Scan+0x180>)
 80009d0:	7909      	ldrb	r1, [r1, #4]
 80009d2:	b2c9      	uxtb	r1, r1
 80009d4:	2000      	movs	r0, #0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80009de:	4621      	mov	r1, r4
 80009e0:	4311      	orrs	r1, r2
 80009e2:	6039      	str	r1, [r7, #0]
 80009e4:	4629      	mov	r1, r5
 80009e6:	4319      	orrs	r1, r3
 80009e8:	6079      	str	r1, [r7, #4]
 80009ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80009f0:	e9c3 1200 	strd	r1, r2, [r3]

        return 1; // Success
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <RFID_Scan+0x176>
    }
    return 0; // Failure
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3754      	adds	r7, #84	; 0x54
 80009fe:	46bd      	mov	sp, r7
 8000a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a04:	20000088 	.word	0x20000088
 8000a08:	0800253c 	.word	0x0800253c

08000a0c <SetOutput>:
  for(j=0;j<16000;j++);
}


void SetOutput(GPIO_TypeDef *gpio,uint32_t pin)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	gpio->MODER|=(1<<(pin*2));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	0052      	lsls	r2, r2, #1
 8000a1e:	2101      	movs	r1, #1
 8000a20:	fa01 f202 	lsl.w	r2, r1, r2
 8000a24:	431a      	orrs	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
	gpio->MODER&=~(1<<((pin*2)+1));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	3201      	adds	r2, #1
 8000a34:	2101      	movs	r1, #1
 8000a36:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3a:	43d2      	mvns	r2, r2
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <SetBit>:
	gpio->MODER&=~(1<<(pin*2));
	gpio->MODER&=~(1<<((pin*2)+1));
}

void SetBit(GPIO_TypeDef *gpio,uint32_t pin)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
	gpio->ODR|=(1<<pin);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	fa01 f202 	lsl.w	r2, r1, r2
 8000a64:	431a      	orrs	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	615a      	str	r2, [r3, #20]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <ClrBit>:

void ClrBit(GPIO_TypeDef *gpio,uint32_t pin)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
	gpio->ODR&=~(1<<pin);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	2101      	movs	r1, #1
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8c:	43d2      	mvns	r2, r2
 8000a8e:	401a      	ands	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	615a      	str	r2, [r3, #20]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <__NVIC_EnableIRQ>:
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	; (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <delay_us>:

#define GPIO_PIN_2   (1 << 2)   // DHT11 on PA2
#define PC10_PIN     (1 << 10)  // Motor / Alert LED

// ---------------- DWT Delay ----------------
static void delay_us(uint32_t us) {
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <delay_us+0x40>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <delay_us+0x44>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <delay_us+0x48>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	0c9a      	lsrs	r2, r3, #18
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000afe:	bf00      	nop
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <delay_us+0x40>)
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d8f8      	bhi.n	8000b00 <delay_us+0x24>
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e0001000 	.word	0xe0001000
 8000b20:	20000000 	.word	0x20000000
 8000b24:	431bde83 	.word	0x431bde83

08000b28 <delay_ms>:

static void delay_ms(uint32_t ms) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
    while (ms--) delay_us(1000);
 8000b30:	e003      	b.n	8000b3a <delay_ms+0x12>
 8000b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b36:	f7ff ffd1 	bl	8000adc <delay_us>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1f6      	bne.n	8000b32 <delay_ms+0xa>
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <DHT11_Set_Pin_Output>:

// ---------------- DHT11 Helpers ----------------
static void DHT11_Set_Pin_Output(void) {
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
    GPIOA->MODER &= ~(3 << (2 * 2));
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <DHT11_Set_Pin_Output+0x34>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <DHT11_Set_Pin_Output+0x34>)
 8000b5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b5e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (2 * 2));   // Output
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <DHT11_Set_Pin_Output+0x34>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <DHT11_Set_Pin_Output+0x34>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (2 * 2));
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <DHT11_Set_Pin_Output+0x34>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <DHT11_Set_Pin_Output+0x34>)
 8000b72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40020000 	.word	0x40020000

08000b88 <DHT11_Set_Pin_Input>:

static void DHT11_Set_Pin_Input(void) {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
    GPIOA->MODER &= ~(3 << (2 * 2));  // Input
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <DHT11_Set_Pin_Input+0x34>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <DHT11_Set_Pin_Input+0x34>)
 8000b92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b96:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (2 * 2));
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <DHT11_Set_Pin_Input+0x34>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <DHT11_Set_Pin_Input+0x34>)
 8000b9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ba2:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1 << (2 * 2));   // Pull-up
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <DHT11_Set_Pin_Input+0x34>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <DHT11_Set_Pin_Input+0x34>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <DHT11_Start>:

static void DHT11_Start(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    DHT11_Set_Pin_Output();
 8000bc4:	f7ff ffc4 	bl	8000b50 <DHT11_Set_Pin_Output>
    GPIOA->ODR &= ~GPIO_PIN_2;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <DHT11_Start+0x34>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <DHT11_Start+0x34>)
 8000bce:	f023 0304 	bic.w	r3, r3, #4
 8000bd2:	6153      	str	r3, [r2, #20]
    delay_ms(20);
 8000bd4:	2014      	movs	r0, #20
 8000bd6:	f7ff ffa7 	bl	8000b28 <delay_ms>
    GPIOA->ODR |= GPIO_PIN_2;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <DHT11_Start+0x34>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <DHT11_Start+0x34>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6153      	str	r3, [r2, #20]
    delay_us(30);
 8000be6:	201e      	movs	r0, #30
 8000be8:	f7ff ff78 	bl	8000adc <delay_us>
    DHT11_Set_Pin_Input();
 8000bec:	f7ff ffcc 	bl	8000b88 <DHT11_Set_Pin_Input>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <DHT11_Check_Response>:

static uint8_t DHT11_Check_Response(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    delay_us(40);
 8000bfc:	2028      	movs	r0, #40	; 0x28
 8000bfe:	f7ff ff6d 	bl	8000adc <delay_us>
    if (!(GPIOA->IDR & GPIO_PIN_2)) {
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <DHT11_Check_Response+0x38>)
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10d      	bne.n	8000c2a <DHT11_Check_Response+0x32>
        delay_us(80);
 8000c0e:	2050      	movs	r0, #80	; 0x50
 8000c10:	f7ff ff64 	bl	8000adc <delay_us>
        if (GPIOA->IDR & GPIO_PIN_2) {
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <DHT11_Check_Response+0x38>)
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d004      	beq.n	8000c2a <DHT11_Check_Response+0x32>
            delay_us(80);
 8000c20:	2050      	movs	r0, #80	; 0x50
 8000c22:	f7ff ff5b 	bl	8000adc <delay_us>
            return 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <DHT11_Check_Response+0x34>
        }
    }
    return 0;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40020000 	.word	0x40020000

08000c34 <DHT11_Read>:

static uint8_t DHT11_Read(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
    uint8_t i, data = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8000c3e:	2300      	movs	r3, #0
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e025      	b.n	8000c90 <DHT11_Read+0x5c>
        while (!(GPIOA->IDR & GPIO_PIN_2));
 8000c44:	bf00      	nop
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <DHT11_Read+0x6c>)
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f9      	beq.n	8000c46 <DHT11_Read+0x12>
        delay_us(40);
 8000c52:	2028      	movs	r0, #40	; 0x28
 8000c54:	f7ff ff42 	bl	8000adc <delay_us>
        if (GPIOA->IDR & GPIO_PIN_2)
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <DHT11_Read+0x6c>)
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00b      	beq.n	8000c7c <DHT11_Read+0x48>
            data |= (1 << (7 - i));
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	b25a      	sxtb	r2, r3
 8000c72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	71bb      	strb	r3, [r7, #6]
        while (GPIOA->IDR & GPIO_PIN_2);
 8000c7c:	bf00      	nop
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <DHT11_Read+0x6c>)
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f9      	bne.n	8000c7e <DHT11_Read+0x4a>
    for (i = 0; i < 8; i++) {
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b07      	cmp	r3, #7
 8000c94:	d9d6      	bls.n	8000c44 <DHT11_Read+0x10>
    }
    return data;
 8000c96:	79bb      	ldrb	r3, [r7, #6]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <DHT11_GetData>:

static uint8_t DHT11_GetData(DHT11_Data *data) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    uint8_t Rh1, Rh2, Temp1, Temp2, checksum;
    DHT11_Start();
 8000cac:	f7ff ff88 	bl	8000bc0 <DHT11_Start>
    if (DHT11_Check_Response()) {
 8000cb0:	f7ff ffa2 	bl	8000bf8 <DHT11_Check_Response>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d025      	beq.n	8000d06 <DHT11_GetData+0x62>
        Rh1 = DHT11_Read();
 8000cba:	f7ff ffbb 	bl	8000c34 <DHT11_Read>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	73fb      	strb	r3, [r7, #15]
        Rh2 = DHT11_Read();
 8000cc2:	f7ff ffb7 	bl	8000c34 <DHT11_Read>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73bb      	strb	r3, [r7, #14]
        Temp1 = DHT11_Read();
 8000cca:	f7ff ffb3 	bl	8000c34 <DHT11_Read>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	737b      	strb	r3, [r7, #13]
        Temp2 = DHT11_Read();
 8000cd2:	f7ff ffaf 	bl	8000c34 <DHT11_Read>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	733b      	strb	r3, [r7, #12]
        checksum = DHT11_Read();
 8000cda:	f7ff ffab 	bl	8000c34 <DHT11_Read>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	72fb      	strb	r3, [r7, #11]
        if (checksum == (Rh1 + Rh2 + Temp1 + Temp2)) {
 8000ce2:	7afa      	ldrb	r2, [r7, #11]
 8000ce4:	7bf9      	ldrb	r1, [r7, #15]
 8000ce6:	7bbb      	ldrb	r3, [r7, #14]
 8000ce8:	4419      	add	r1, r3
 8000cea:	7b7b      	ldrb	r3, [r7, #13]
 8000cec:	4419      	add	r1, r3
 8000cee:	7b3b      	ldrb	r3, [r7, #12]
 8000cf0:	440b      	add	r3, r1
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d107      	bne.n	8000d06 <DHT11_GetData+0x62>
            data->Humidity = Rh1;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	705a      	strb	r2, [r3, #1]
            data->Temperature = Temp1;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7b7a      	ldrb	r2, [r7, #13]
 8000d00:	701a      	strb	r2, [r3, #0]
            return 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <DHT11_GetData+0x64>
        }
    }
    return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <DHT11_Init>:

// ---------------- Public Functions ----------------
void DHT11_Init(void) {
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
    // PA2 default high
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <DHT11_Init+0x40>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <DHT11_Init+0x40>)
 8000d1a:	f043 0305 	orr.w	r3, r3, #5
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->ODR |= GPIO_PIN_2;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <DHT11_Init+0x44>)
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <DHT11_Init+0x44>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6153      	str	r3, [r2, #20]

    // PC10 as motor control pin
    GPIOC->MODER &= ~(3 << (10 * 2));
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <DHT11_Init+0x48>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <DHT11_Init+0x48>)
 8000d32:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000d36:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << (10 * 2));
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <DHT11_Init+0x48>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <DHT11_Init+0x48>)
 8000d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020800 	.word	0x40020800

08000d5c <TIM4_Config>:

void TIM4_Config(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <TIM4_Config+0x44>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <TIM4_Config+0x44>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
    TIM4->PSC = 7200 - 1;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <TIM4_Config+0x48>)
 8000d6e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->ARR = 20000 - 1;  // ~2s interval
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <TIM4_Config+0x48>)
 8000d76:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->DIER |= TIM_DIER_UIE;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <TIM4_Config+0x48>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <TIM4_Config+0x48>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	60d3      	str	r3, [r2, #12]
    TIM4->CR1 |= TIM_CR1_CEN;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <TIM4_Config+0x48>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <TIM4_Config+0x48>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM4_IRQn);
 8000d94:	201e      	movs	r0, #30
 8000d96:	f7ff fe83 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40000800 	.word	0x40000800

08000da8 <TIM4_IRQHandler>:

// ---------------- Timer4 Interrupt Handler ----------------
void TIM4_IRQHandler(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <TIM4_IRQHandler+0x70>)
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d02d      	beq.n	8000e14 <TIM4_IRQHandler+0x6c>
        TIM4->SR &= ~TIM_SR_UIF;
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <TIM4_IRQHandler+0x70>)
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <TIM4_IRQHandler+0x70>)
 8000dbe:	f023 0301 	bic.w	r3, r3, #1
 8000dc2:	6113      	str	r3, [r2, #16]

        if (DHT11_GetData(&dht)) {
 8000dc4:	4815      	ldr	r0, [pc, #84]	; (8000e1c <TIM4_IRQHandler+0x74>)
 8000dc6:	f7ff ff6d 	bl	8000ca4 <DHT11_GetData>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d021      	beq.n	8000e14 <TIM4_IRQHandler+0x6c>
            temperature_alert = dht.Temperature;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <TIM4_IRQHandler+0x74>)
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <TIM4_IRQHandler+0x78>)
 8000dd6:	701a      	strb	r2, [r3, #0]
            humidity_alert = dht.Humidity;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <TIM4_IRQHandler+0x74>)
 8000dda:	785a      	ldrb	r2, [r3, #1]
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <TIM4_IRQHandler+0x7c>)
 8000dde:	701a      	strb	r2, [r3, #0]
//            lprint_num(0x83, temperature_alert);
//            lprint(0x86, "H:");
//            lprint_num(0x89, humidity_alert);

            // Motor control logic
            if (temperature_alert > 24 && humidity_alert > 80) {
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <TIM4_IRQHandler+0x78>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b18      	cmp	r3, #24
 8000de8:	d914      	bls.n	8000e14 <TIM4_IRQHandler+0x6c>
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <TIM4_IRQHandler+0x7c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b50      	cmp	r3, #80	; 0x50
 8000df2:	d90f      	bls.n	8000e14 <TIM4_IRQHandler+0x6c>
                GPIOC->ODR |= PC10_PIN;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <TIM4_IRQHandler+0x80>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <TIM4_IRQHandler+0x80>)
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfe:	6153      	str	r3, [r2, #20]
                //lprint(0xC0, "MOTOR ON...!");
                delay_ms(5000);
 8000e00:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e04:	f7ff fe90 	bl	8000b28 <delay_ms>
                GPIOC->ODR &= ~PC10_PIN;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <TIM4_IRQHandler+0x80>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <TIM4_IRQHandler+0x80>)
 8000e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e12:	6153      	str	r3, [r2, #20]
               // lprint(0xC0, "MOTOR OFF   ");
            }
        }
    }
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40000800 	.word	0x40000800
 8000e1c:	20000094 	.word	0x20000094
 8000e20:	20000096 	.word	0x20000096
 8000e24:	20000097 	.word	0x20000097
 8000e28:	40020800 	.word	0x40020800

08000e2c <DelayLcd>:
*/

#include  "cmn.h"

void DelayLcd(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
	for(i=0;i<16800;i++);
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e002      	b.n	8000e42 <DelayLcd+0x16>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f244 129f 	movw	r2, #16799	; 0x419f
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d9f7      	bls.n	8000e3c <DelayLcd+0x10>
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <LcdInit>:

void LcdInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=(RCC_AHB1ENR_GPIOAEN);
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <LcdInit+0x78>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <LcdInit+0x78>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |=(RCC_AHB1ENR_GPIOBEN);
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <LcdInit+0x78>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <LcdInit+0x78>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
	SetOutput(PORT_RS,PIN_RS);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4817      	ldr	r0, [pc, #92]	; (8000ed8 <LcdInit+0x7c>)
 8000e7c:	f7ff fdc6 	bl	8000a0c <SetOutput>
	SetOutput(PORT_EN,PIN_EN);
 8000e80:	2101      	movs	r1, #1
 8000e82:	4815      	ldr	r0, [pc, #84]	; (8000ed8 <LcdInit+0x7c>)
 8000e84:	f7ff fdc2 	bl	8000a0c <SetOutput>
	SetOutput(PORT_D4,PIN_D4);
 8000e88:	210c      	movs	r1, #12
 8000e8a:	4814      	ldr	r0, [pc, #80]	; (8000edc <LcdInit+0x80>)
 8000e8c:	f7ff fdbe 	bl	8000a0c <SetOutput>
	SetOutput(PORT_D5,PIN_D5);
 8000e90:	210d      	movs	r1, #13
 8000e92:	4812      	ldr	r0, [pc, #72]	; (8000edc <LcdInit+0x80>)
 8000e94:	f7ff fdba 	bl	8000a0c <SetOutput>
	SetOutput(PORT_D6,PIN_D6);
 8000e98:	210e      	movs	r1, #14
 8000e9a:	4810      	ldr	r0, [pc, #64]	; (8000edc <LcdInit+0x80>)
 8000e9c:	f7ff fdb6 	bl	8000a0c <SetOutput>
	SetOutput(PORT_D7,PIN_D7);
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <LcdInit+0x80>)
 8000ea4:	f7ff fdb2 	bl	8000a0c <SetOutput>

	LcdFxn(0,0x33);
 8000ea8:	2133      	movs	r1, #51	; 0x33
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f818 	bl	8000ee0 <LcdFxn>
	LcdFxn(0,0x32);
 8000eb0:	2132      	movs	r1, #50	; 0x32
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f814 	bl	8000ee0 <LcdFxn>
	LcdFxn(0,0x28);
 8000eb8:	2128      	movs	r1, #40	; 0x28
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f810 	bl	8000ee0 <LcdFxn>
	LcdFxn(0,0x0c);
 8000ec0:	210c      	movs	r1, #12
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f80c 	bl	8000ee0 <LcdFxn>
	LcdFxn(0,0x01);
 8000ec8:	2101      	movs	r1, #1
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <LcdFxn>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400

08000ee0 <LcdFxn>:

void LcdFxn(uint8_t cmd,uint8_t val)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]

	if(val&(1<<7))
 8000ef0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da04      	bge.n	8000f02 <LcdFxn+0x22>
		SetBit(PORT_D7,PIN_D7);
 8000ef8:	210f      	movs	r1, #15
 8000efa:	484f      	ldr	r0, [pc, #316]	; (8001038 <LcdFxn+0x158>)
 8000efc:	f7ff fda7 	bl	8000a4e <SetBit>
 8000f00:	e003      	b.n	8000f0a <LcdFxn+0x2a>
	else
		ClrBit(PORT_D7,PIN_D7);
 8000f02:	210f      	movs	r1, #15
 8000f04:	484c      	ldr	r0, [pc, #304]	; (8001038 <LcdFxn+0x158>)
 8000f06:	f7ff fdb6 	bl	8000a76 <ClrBit>

	if(val&(1<<6))
 8000f0a:	79bb      	ldrb	r3, [r7, #6]
 8000f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <LcdFxn+0x3e>
		SetBit(PORT_D6,PIN_D6);
 8000f14:	210e      	movs	r1, #14
 8000f16:	4848      	ldr	r0, [pc, #288]	; (8001038 <LcdFxn+0x158>)
 8000f18:	f7ff fd99 	bl	8000a4e <SetBit>
 8000f1c:	e003      	b.n	8000f26 <LcdFxn+0x46>
	else
		ClrBit(PORT_D6,PIN_D6);
 8000f1e:	210e      	movs	r1, #14
 8000f20:	4845      	ldr	r0, [pc, #276]	; (8001038 <LcdFxn+0x158>)
 8000f22:	f7ff fda8 	bl	8000a76 <ClrBit>

	if(val&(1<<5))
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <LcdFxn+0x5a>
		SetBit(PORT_D5,PIN_D5);
 8000f30:	210d      	movs	r1, #13
 8000f32:	4841      	ldr	r0, [pc, #260]	; (8001038 <LcdFxn+0x158>)
 8000f34:	f7ff fd8b 	bl	8000a4e <SetBit>
 8000f38:	e003      	b.n	8000f42 <LcdFxn+0x62>
	else
		ClrBit(PORT_D5,PIN_D5);
 8000f3a:	210d      	movs	r1, #13
 8000f3c:	483e      	ldr	r0, [pc, #248]	; (8001038 <LcdFxn+0x158>)
 8000f3e:	f7ff fd9a 	bl	8000a76 <ClrBit>

	if(val&(1<<4))
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <LcdFxn+0x76>
		SetBit(PORT_D4,PIN_D4);
 8000f4c:	210c      	movs	r1, #12
 8000f4e:	483a      	ldr	r0, [pc, #232]	; (8001038 <LcdFxn+0x158>)
 8000f50:	f7ff fd7d 	bl	8000a4e <SetBit>
 8000f54:	e003      	b.n	8000f5e <LcdFxn+0x7e>
	else
		ClrBit(PORT_D4,PIN_D4);
 8000f56:	210c      	movs	r1, #12
 8000f58:	4837      	ldr	r0, [pc, #220]	; (8001038 <LcdFxn+0x158>)
 8000f5a:	f7ff fd8c 	bl	8000a76 <ClrBit>

	if(cmd)   SetBit(PORT_RS,PIN_RS);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <LcdFxn+0x8e>
 8000f64:	2100      	movs	r1, #0
 8000f66:	4835      	ldr	r0, [pc, #212]	; (800103c <LcdFxn+0x15c>)
 8000f68:	f7ff fd71 	bl	8000a4e <SetBit>
 8000f6c:	e003      	b.n	8000f76 <LcdFxn+0x96>
	else
		ClrBit(PORT_RS,PIN_RS);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4832      	ldr	r0, [pc, #200]	; (800103c <LcdFxn+0x15c>)
 8000f72:	f7ff fd80 	bl	8000a76 <ClrBit>

	SetBit(PORT_EN,PIN_EN);
 8000f76:	2101      	movs	r1, #1
 8000f78:	4830      	ldr	r0, [pc, #192]	; (800103c <LcdFxn+0x15c>)
 8000f7a:	f7ff fd68 	bl	8000a4e <SetBit>
	DelayLcd();
 8000f7e:	f7ff ff55 	bl	8000e2c <DelayLcd>
	ClrBit(PORT_EN,PIN_EN);
 8000f82:	2101      	movs	r1, #1
 8000f84:	482d      	ldr	r0, [pc, #180]	; (800103c <LcdFxn+0x15c>)
 8000f86:	f7ff fd76 	bl	8000a76 <ClrBit>
	DelayLcd();
 8000f8a:	f7ff ff4f 	bl	8000e2c <DelayLcd>


	if(val&(1<<3))
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <LcdFxn+0xc2>
		SetBit(PORT_D7,PIN_D7);
 8000f98:	210f      	movs	r1, #15
 8000f9a:	4827      	ldr	r0, [pc, #156]	; (8001038 <LcdFxn+0x158>)
 8000f9c:	f7ff fd57 	bl	8000a4e <SetBit>
 8000fa0:	e003      	b.n	8000faa <LcdFxn+0xca>
	else
		ClrBit(PORT_D7,PIN_D7);
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	4824      	ldr	r0, [pc, #144]	; (8001038 <LcdFxn+0x158>)
 8000fa6:	f7ff fd66 	bl	8000a76 <ClrBit>

	if(val&(1<<2))
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <LcdFxn+0xde>
		SetBit(PORT_D6,PIN_D6);
 8000fb4:	210e      	movs	r1, #14
 8000fb6:	4820      	ldr	r0, [pc, #128]	; (8001038 <LcdFxn+0x158>)
 8000fb8:	f7ff fd49 	bl	8000a4e <SetBit>
 8000fbc:	e003      	b.n	8000fc6 <LcdFxn+0xe6>
	else
		ClrBit(PORT_D6,PIN_D6);
 8000fbe:	210e      	movs	r1, #14
 8000fc0:	481d      	ldr	r0, [pc, #116]	; (8001038 <LcdFxn+0x158>)
 8000fc2:	f7ff fd58 	bl	8000a76 <ClrBit>

	if(val&(1<<1))
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d004      	beq.n	8000fda <LcdFxn+0xfa>
		SetBit(PORT_D5,PIN_D5);
 8000fd0:	210d      	movs	r1, #13
 8000fd2:	4819      	ldr	r0, [pc, #100]	; (8001038 <LcdFxn+0x158>)
 8000fd4:	f7ff fd3b 	bl	8000a4e <SetBit>
 8000fd8:	e003      	b.n	8000fe2 <LcdFxn+0x102>
	else
		ClrBit(PORT_D5,PIN_D5);
 8000fda:	210d      	movs	r1, #13
 8000fdc:	4816      	ldr	r0, [pc, #88]	; (8001038 <LcdFxn+0x158>)
 8000fde:	f7ff fd4a 	bl	8000a76 <ClrBit>

	if(val&(1<<0))
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <LcdFxn+0x116>
		SetBit(PORT_D4,PIN_D4);
 8000fec:	210c      	movs	r1, #12
 8000fee:	4812      	ldr	r0, [pc, #72]	; (8001038 <LcdFxn+0x158>)
 8000ff0:	f7ff fd2d 	bl	8000a4e <SetBit>
 8000ff4:	e003      	b.n	8000ffe <LcdFxn+0x11e>
	else
		ClrBit(PORT_D4,PIN_D4);
 8000ff6:	210c      	movs	r1, #12
 8000ff8:	480f      	ldr	r0, [pc, #60]	; (8001038 <LcdFxn+0x158>)
 8000ffa:	f7ff fd3c 	bl	8000a76 <ClrBit>

	if(cmd)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <LcdFxn+0x12e>
		SetBit(PORT_RS,PIN_RS);
 8001004:	2100      	movs	r1, #0
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <LcdFxn+0x15c>)
 8001008:	f7ff fd21 	bl	8000a4e <SetBit>
 800100c:	e003      	b.n	8001016 <LcdFxn+0x136>
	else
		ClrBit(PORT_RS,PIN_RS);
 800100e:	2100      	movs	r1, #0
 8001010:	480a      	ldr	r0, [pc, #40]	; (800103c <LcdFxn+0x15c>)
 8001012:	f7ff fd30 	bl	8000a76 <ClrBit>

	SetBit(PORT_EN,PIN_EN);
 8001016:	2101      	movs	r1, #1
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <LcdFxn+0x15c>)
 800101a:	f7ff fd18 	bl	8000a4e <SetBit>
	DelayLcd();
 800101e:	f7ff ff05 	bl	8000e2c <DelayLcd>
	ClrBit(PORT_EN,PIN_EN);
 8001022:	2101      	movs	r1, #1
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <LcdFxn+0x15c>)
 8001026:	f7ff fd26 	bl	8000a76 <ClrBit>
	DelayLcd();
 800102a:	f7ff feff 	bl	8000e2c <DelayLcd>

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40020400 	.word	0x40020400
 800103c:	40020000 	.word	0x40020000

08001040 <lprint_num>:

void lprint_num(uint8_t addr, uint32_t value) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
    char buffer[12]; // Enough to hold up to 10 digits + null
    uint8_t i = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	75fb      	strb	r3, [r7, #23]

    // Convert number to string (basic implementation)
    sprintf(buffer, "%lu", value);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	4907      	ldr	r1, [pc, #28]	; (8001074 <lprint_num+0x34>)
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fdf5 	bl	8001c48 <siprintf>

    // Use existing lprint to print the string
    lprint(addr, buffer);
 800105e:	f107 0208 	add.w	r2, r7, #8
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f806 	bl	8001078 <lprint>
}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	08002554 	.word	0x08002554

08001078 <lprint>:


void lprint(uint8_t add, char *str)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
   uint8_t  i=0;
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
   LcdFxn(0,add);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4619      	mov	r1, r3
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff ff27 	bl	8000ee0 <LcdFxn>

   while(str[i]!=0)
 8001092:	e00d      	b.n	80010b0 <lprint+0x38>
   {
	   LcdFxn(1,str[i]);
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff1e 	bl	8000ee0 <LcdFxn>
	   str++;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	603b      	str	r3, [r7, #0]
	   if(i>16)
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d806      	bhi.n	80010be <lprint+0x46>
   while(str[i]!=0)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1eb      	bne.n	8001094 <lprint+0x1c>
		   break;
   }
}
 80010bc:	e000      	b.n	80010c0 <lprint+0x48>
		   break;
 80010be:	bf00      	nop
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <water_level_init>:
static float waterPercent = 0.0f;     // Calculated water percentage

/**
 * @brief Initialize water level sensor (ADC and GPIO)
 */
void water_level_init(void) {
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    // 1. Enable GPIOC and ADC1 clocks
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <water_level_init+0x5c>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <water_level_init+0x5c>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <water_level_init+0x5c>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	4a11      	ldr	r2, [pc, #68]	; (8001124 <water_level_init+0x5c>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6453      	str	r3, [r2, #68]	; 0x44

    // 2. Configure PC1 as analog input (ADC1_IN11)
    GPIOC->MODER |= (3UL << (1 * 2));  // Analog mode
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <water_level_init+0x60>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <water_level_init+0x60>)
 80010ea:	f043 030c 	orr.w	r3, r3, #12
 80010ee:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3UL << (1 * 2)); // No pull-up/down
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <water_level_init+0x60>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <water_level_init+0x60>)
 80010f6:	f023 030c 	bic.w	r3, r3, #12
 80010fa:	60d3      	str	r3, [r2, #12]

    // 3. Configure ADC1
    ADC1->CR1 = 0;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <water_level_init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
    ADC1->CR2 = ADC_CR2_ADON;
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <water_level_init+0x64>)
 8001104:	2201      	movs	r2, #1
 8001106:	609a      	str	r2, [r3, #8]
    ADC1->SMPR1 |= (3UL << 9);       // Sampling time for channel 11
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <water_level_init+0x64>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <water_level_init+0x64>)
 800110e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001112:	60d3      	str	r3, [r2, #12]
    ADC1->SQR3 = 11;                 // First conversion = channel 11
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <water_level_init+0x64>)
 8001116:	220b      	movs	r2, #11
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40023800 	.word	0x40023800
 8001128:	40020800 	.word	0x40020800
 800112c:	40012000 	.word	0x40012000

08001130 <water_level_read_raw>:

/**
 * @brief Read raw ADC value from water level sensor
 * @return Raw ADC value (0-4095)
 */
uint16_t water_level_read_raw(void) {
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <water_level_read_raw+0x38>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <water_level_read_raw+0x38>)
 800113a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800113e:	6093      	str	r3, [r2, #8]
    while(!(ADC1->SR & ADC_SR_EOC));
 8001140:	bf00      	nop
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <water_level_read_raw+0x38>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f9      	beq.n	8001142 <water_level_read_raw+0x12>

    // Read and return ADC value
    waterValue = ADC1->DR;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <water_level_read_raw+0x38>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <water_level_read_raw+0x3c>)
 8001156:	801a      	strh	r2, [r3, #0]
    return waterValue;
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <water_level_read_raw+0x3c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40012000 	.word	0x40012000
 800116c:	20000098 	.word	0x20000098

08001170 <water_level_read_percent>:

/**
 * @brief Read water level as percentage (0-100%)
 * @return Water level percentage (0.0 - 100.0)
 */
float water_level_read_percent(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    // Get raw ADC value
    waterValue = water_level_read_raw();
 8001174:	f7ff ffdc 	bl	8001130 <water_level_read_raw>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <water_level_read_percent+0x94>)
 800117e:	801a      	strh	r2, [r3, #0]

    // Clamp to valid range
    if(waterValue < ADC_MIN) waterValue = ADC_MIN;
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <water_level_read_percent+0x94>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	2b59      	cmp	r3, #89	; 0x59
 8001186:	d802      	bhi.n	800118e <water_level_read_percent+0x1e>
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <water_level_read_percent+0x94>)
 800118a:	225a      	movs	r2, #90	; 0x5a
 800118c:	801a      	strh	r2, [r3, #0]
    if(waterValue > ADC_MAX) waterValue = ADC_MAX;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <water_level_read_percent+0x94>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001196:	d903      	bls.n	80011a0 <water_level_read_percent+0x30>
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <water_level_read_percent+0x94>)
 800119a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800119e:	801a      	strh	r2, [r3, #0]

    // Convert to percentage
    waterPercent = ((float)(waterValue - ADC_MIN) / (ADC_MAX - ADC_MIN)) * 100.0f;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <water_level_read_percent+0x94>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	3b5a      	subs	r3, #90	; 0x5a
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001208 <water_level_read_percent+0x98>
 80011b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800120c <water_level_read_percent+0x9c>
 80011ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <water_level_read_percent+0xa0>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]

    // Clamp to 0-100%
    if(waterPercent < 0) waterPercent = 0;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <water_level_read_percent+0xa0>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	d503      	bpl.n	80011dc <water_level_read_percent+0x6c>
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <water_level_read_percent+0xa0>)
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
    if(waterPercent > 100) waterPercent = 100;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <water_level_read_percent+0xa0>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800120c <water_level_read_percent+0x9c>
 80011e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	dd02      	ble.n	80011f6 <water_level_read_percent+0x86>
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <water_level_read_percent+0xa0>)
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <water_level_read_percent+0xa4>)
 80011f4:	601a      	str	r2, [r3, #0]

    return waterPercent;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <water_level_read_percent+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	ee07 3a90 	vmov	s15, r3
}
 80011fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000098 	.word	0x20000098
 8001208:	44eec000 	.word	0x44eec000
 800120c:	42c80000 	.word	0x42c80000
 8001210:	2000009c 	.word	0x2000009c
 8001214:	42c80000 	.word	0x42c80000

08001218 <delay_ms>:


void delay_ms(uint32_t ms) {
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < ms * 4000; i++) __NOP();
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e003      	b.n	800122e <delay_ms+0x16>
 8001226:	bf00      	nop
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	429a      	cmp	r2, r3
 800123c:	d3f3      	bcc.n	8001226 <delay_ms+0xe>
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <__NVIC_EnableIRQ>:
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <buzzer_on>:

/* Global flag from IR.c, modified by an ISR */
extern volatile uint8_t object_detected;

/* --- Application-Specific Functions --- */
static inline void buzzer_on(void) {
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	GPIOC->BSRR = BUZZER_PIN;
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <buzzer_on+0x18>)
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	619a      	str	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40020800 	.word	0x40020800

080012f8 <buzzer_off>:
static inline void buzzer_off(void) {
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	GPIOC->BSRR = (BUZZER_PIN << 16);
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <buzzer_off+0x18>)
 80012fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001302:	619a      	str	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40020800 	.word	0x40020800

08001314 <led_on>:

/* --- LED Control Functions --- */
static inline void led_on(uint32_t led_pin) {
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	GPIOA->BSRR = led_pin;
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <led_on+0x1c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6193      	str	r3, [r2, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40020000 	.word	0x40020000

08001334 <led_off>:

static inline void led_off(uint32_t led_pin) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	GPIOA->BSRR = (led_pin << 16);
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <led_off+0x1c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	6193      	str	r3, [r2, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40020000 	.word	0x40020000

08001354 <all_leds_off>:

static void all_leds_off(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	led_off(LED1_PIN);
 8001358:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800135c:	f7ff ffea 	bl	8001334 <led_off>
	led_off(LED2_PIN);
 8001360:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001364:	f7ff ffe6 	bl	8001334 <led_off>
	led_off(LED3_PIN);
 8001368:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800136c:	f7ff ffe2 	bl	8001334 <led_off>
	led_off(LED4_PIN);
 8001370:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001374:	f7ff ffde 	bl	8001334 <led_off>
	led_off(LED5_PIN);
 8001378:	f44f 7000 	mov.w	r0, #512	; 0x200
 800137c:	f7ff ffda 	bl	8001334 <led_off>
	led_off(LED6_PIN);
 8001380:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001384:	f7ff ffd6 	bl	8001334 <led_off>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <update_led_bar_graph>:

/* --- Water Level LED Bar Graph Control --- */
static void update_led_bar_graph(float water_percent) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	ed87 0a01 	vstr	s0, [r7, #4]
	// Turn off all LEDs first
	all_leds_off();
 8001396:	f7ff ffdd 	bl	8001354 <all_leds_off>

	// If water level is 0%, keep all LEDs off
	if (water_percent <= 0.0f) {
 800139a:	edd7 7a01 	vldr	s15, [r7, #4]
 800139e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	d95b      	bls.n	8001460 <update_led_bar_graph+0xd4>
		return;
	}

	// Turn on LEDs based on water percentage ranges
	// Use >= for cumulative effect (fuel gauge style)
	if (water_percent >= 5.0f) {   // 5-20%: PA15
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	db03      	blt.n	80013c2 <update_led_bar_graph+0x36>
		led_on(LED1_PIN);
 80013ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013be:	f7ff ffa9 	bl	8001314 <led_on>
	}
	if (water_percent >= 20.0f) {  // 20-40%: PA12
 80013c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80013ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	db03      	blt.n	80013dc <update_led_bar_graph+0x50>
		led_on(LED2_PIN);
 80013d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013d8:	f7ff ff9c 	bl	8001314 <led_on>
	}
	if (water_percent >= 40.0f) {  // 40-60%: PA11
 80013dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001468 <update_led_bar_graph+0xdc>
 80013e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	db03      	blt.n	80013f6 <update_led_bar_graph+0x6a>
		led_on(LED3_PIN);
 80013ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013f2:	f7ff ff8f 	bl	8001314 <led_on>
	}
	if (water_percent >= 60.0f) {  // 60-70%: PA10
 80013f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800146c <update_led_bar_graph+0xe0>
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	db03      	blt.n	8001410 <update_led_bar_graph+0x84>
		led_on(LED4_PIN);
 8001408:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800140c:	f7ff ff82 	bl	8001314 <led_on>
	}
	if (water_percent >= 70.0f) {  // 70-90%: PA9
 8001410:	edd7 7a01 	vldr	s15, [r7, #4]
 8001414:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001470 <update_led_bar_graph+0xe4>
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	db03      	blt.n	800142a <update_led_bar_graph+0x9e>
		led_on(LED5_PIN);
 8001422:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001426:	f7ff ff75 	bl	8001314 <led_on>
	}
	if (water_percent >= 90.0f) {  // 90-100%: PA8
 800142a:	edd7 7a01 	vldr	s15, [r7, #4]
 800142e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001474 <update_led_bar_graph+0xe8>
 8001432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	db03      	blt.n	8001444 <update_led_bar_graph+0xb8>
		led_on(LED6_PIN);
 800143c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001440:	f7ff ff68 	bl	8001314 <led_on>
	}

	// Debug: Force PA8 on when water_percent is exactly 100%
	if (water_percent >= 100.0f) {
 8001444:	edd7 7a01 	vldr	s15, [r7, #4]
 8001448:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001478 <update_led_bar_graph+0xec>
 800144c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	db05      	blt.n	8001462 <update_led_bar_graph+0xd6>
		GPIOA->BSRR = LED6_PIN;  // Directly set PA8 high
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <update_led_bar_graph+0xf0>)
 8001458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	e000      	b.n	8001462 <update_led_bar_graph+0xd6>
		return;
 8001460:	bf00      	nop
	}
}
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	42200000 	.word	0x42200000
 800146c:	42700000 	.word	0x42700000
 8001470:	428c0000 	.word	0x428c0000
 8001474:	42b40000 	.word	0x42b40000
 8001478:	42c80000 	.word	0x42c80000
 800147c:	40020000 	.word	0x40020000

08001480 <TIM6_DAC_IRQHandler>:

/* --- Timer 6 Interrupt Handler --- */
void TIM6_DAC_IRQHandler(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	// Check if update interrupt flag is set
	if (TIM6->SR & TIM_SR_UIF) {
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <TIM6_DAC_IRQHandler+0x4c>)
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01a      	beq.n	80014c6 <TIM6_DAC_IRQHandler+0x46>
		// Clear the interrupt flag
		TIM6->SR &= ~TIM_SR_UIF;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <TIM6_DAC_IRQHandler+0x4c>)
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <TIM6_DAC_IRQHandler+0x4c>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	6113      	str	r3, [r2, #16]

		// Only read sensors when system is unlocked
		if (unlocked) {
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <TIM6_DAC_IRQHandler+0x50>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00f      	beq.n	80014c6 <TIM6_DAC_IRQHandler+0x46>
			// Read water level sensor
			waterValue = water_level_read_raw();
 80014a6:	f7ff fe43 	bl	8001130 <water_level_read_raw>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <TIM6_DAC_IRQHandler+0x54>)
 80014b0:	801a      	strh	r2, [r3, #0]
			waterPercent = water_level_read_percent();
 80014b2:	f7ff fe5d 	bl	8001170 <water_level_read_percent>
 80014b6:	eef0 7a40 	vmov.f32	s15, s0
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <TIM6_DAC_IRQHandler+0x58>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]

			// Set flag to indicate new data is available
			data_update_flag = 1;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <TIM6_DAC_IRQHandler+0x5c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40001000 	.word	0x40001000
 80014d0:	200000a8 	.word	0x200000a8
 80014d4:	200000a0 	.word	0x200000a0
 80014d8:	200000a4 	.word	0x200000a4
 80014dc:	200000a9 	.word	0x200000a9

080014e0 <timer6_init>:

/* --- Timer 6 Initialization (500ms interrupt) --- */
static void timer6_init(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	// Enable Timer 6 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <timer6_init+0x4c>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	4a10      	ldr	r2, [pc, #64]	; (800152c <timer6_init+0x4c>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure Timer 6
	// Assuming APB1 clock is 42MHz (typical for STM32F405)
	// For 500ms: ARR = (42000000 * 0.5) / (PSC + 1) - 1
	// Using PSC = 41999, ARR = 499 gives us exactly 500ms
	TIM6->PSC = 41999;    // Prescaler: 42MHz / 42000 = 1kHz
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <timer6_init+0x50>)
 80014f2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 499;      // Auto-reload: 1kHz / 500 = 2Hz (500ms period)
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <timer6_init+0x50>)
 80014fa:	f240 12f3 	movw	r2, #499	; 0x1f3
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable update interrupt
	TIM6->DIER |= TIM_DIER_UIE;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <timer6_init+0x50>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <timer6_init+0x50>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	60d3      	str	r3, [r2, #12]

	// Enable Timer 6 interrupt in NVIC
	NVIC_SetPriority(TIM6_DAC_IRQn, 3); // Set priority (0-15, lower is higher priority)
 800150c:	2103      	movs	r1, #3
 800150e:	2036      	movs	r0, #54	; 0x36
 8001510:	f7ff feba 	bl	8001288 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001514:	2036      	movs	r0, #54	; 0x36
 8001516:	f7ff fe99 	bl	800124c <__NVIC_EnableIRQ>

	// Start the timer
	TIM6->CR1 |= TIM_CR1_CEN;
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <timer6_init+0x50>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <timer6_init+0x50>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6013      	str	r3, [r2, #0]
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40001000 	.word	0x40001000

08001534 <gpio_init>:

/* --- Hardware Initialization --- */
static void gpio_init(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN
 8001538:	4b3c      	ldr	r3, [pc, #240]	; (800162c <gpio_init+0xf8>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a3b      	ldr	r2, [pc, #236]	; (800162c <gpio_init+0xf8>)
 800153e:	f043 0307 	orr.w	r3, r3, #7
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
			| RCC_AHB1ENR_GPIOCEN;

	// SPI1 pins (PA4-CS, PA5-SCK, PA6-MISO, PA7-MOSI) and RST (PB1) for RFID
	GPIOA->MODER &= ~((3U << 8) | (3U << 10) | (3U << 12) | (3U << 14));
 8001544:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <gpio_init+0xfc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a39      	ldr	r2, [pc, #228]	; (8001630 <gpio_init+0xfc>)
 800154a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800154e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 8) | (2U << 10) | (2U << 12) | (2U << 14); // PA4=Output, PA5,6,7=AF
 8001550:	4b37      	ldr	r3, [pc, #220]	; (8001630 <gpio_init+0xfc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a36      	ldr	r2, [pc, #216]	; (8001630 <gpio_init+0xfc>)
 8001556:	f443 4329 	orr.w	r3, r3, #43264	; 0xa900
 800155a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= (3U << 8) | (3U << 10) | (3U << 12) | (3U << 14);
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <gpio_init+0xfc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a33      	ldr	r2, [pc, #204]	; (8001630 <gpio_init+0xfc>)
 8001562:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8001566:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] &= ~((0xFU << 20) | (0xFU << 24) | (0xFU << 28));
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <gpio_init+0xfc>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4a30      	ldr	r2, [pc, #192]	; (8001630 <gpio_init+0xfc>)
 800156e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001572:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (5U << 20) | (5U << 24) | (5U << 28); // AF5 for SPI1
 8001574:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <gpio_init+0xfc>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <gpio_init+0xfc>)
 800157a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800157e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001582:	6213      	str	r3, [r2, #32]
	GPIOA->BSRR = (1U << 4); // CS high
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <gpio_init+0xfc>)
 8001586:	2210      	movs	r2, #16
 8001588:	619a      	str	r2, [r3, #24]

	// LED Bar Graph pins (PA8, PA9, PA10, PA11, PA12, PA15) as outputs
	// Clear mode bits for all LED pins
	GPIOA->MODER &= ~((3U << 16) | (3U << 18) | (3U << 20) | (3U << 22)
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <gpio_init+0xfc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a28      	ldr	r2, [pc, #160]	; (8001630 <gpio_init+0xfc>)
 8001590:	f023 4343 	bic.w	r3, r3, #3271557120	; 0xc3000000
 8001594:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001598:	6013      	str	r3, [r2, #0]
			| (3U << 24) | (3U << 30));
	// Set as GPIO outputs (01)
	GPIOA->MODER |= (1U << 16) | (1U << 18) | (1U << 20) | (1U << 22)
 800159a:	4b25      	ldr	r3, [pc, #148]	; (8001630 <gpio_init+0xfc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a24      	ldr	r2, [pc, #144]	; (8001630 <gpio_init+0xfc>)
 80015a0:	f043 4382 	orr.w	r3, r3, #1090519040	; 0x41000000
 80015a4:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 80015a8:	6013      	str	r3, [r2, #0]
			| (1U << 24) | (1U << 30);
	// Set high speed for all LED pins
	GPIOA->OSPEEDR |= (3U << 16) | (3U << 18) | (3U << 20) | (3U << 22)
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <gpio_init+0xfc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	4a20      	ldr	r2, [pc, #128]	; (8001630 <gpio_init+0xfc>)
 80015b0:	f043 4343 	orr.w	r3, r3, #3271557120	; 0xc3000000
 80015b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80015b8:	6093      	str	r3, [r2, #8]
			| (3U << 24) | (3U << 30);

	// Ensure PA8 and PA9 are not configured for alternate function (clear AFR bits)
	GPIOA->AFR[1] &= ~((0xFU << 0) | (0xFU << 4));  // Clear AF for PA8 and PA9
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <gpio_init+0xfc>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <gpio_init+0xfc>)
 80015c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015c4:	6253      	str	r3, [r2, #36]	; 0x24

	// Set output type as push-pull (default, but ensure it's set)
	GPIOA->OTYPER &= ~(LED1_PIN | LED2_PIN | LED3_PIN | LED4_PIN | LED5_PIN
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <gpio_init+0xfc>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a19      	ldr	r2, [pc, #100]	; (8001630 <gpio_init+0xfc>)
 80015cc:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
 80015d0:	6053      	str	r3, [r2, #4]
			| LED6_PIN);

	// Initialize all LEDs to OFF
	all_leds_off();
 80015d2:	f7ff febf 	bl	8001354 <all_leds_off>

	// RST pin (PB1) as output
	GPIOB->MODER &= ~(3U << 2);
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <gpio_init+0x100>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <gpio_init+0x100>)
 80015dc:	f023 030c 	bic.w	r3, r3, #12
 80015e0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 2);
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <gpio_init+0x100>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <gpio_init+0x100>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR |= (3U << 2);
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <gpio_init+0x100>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <gpio_init+0x100>)
 80015f4:	f043 030c 	orr.w	r3, r3, #12
 80015f8:	6093      	str	r3, [r2, #8]
	GPIOB->BSRR = (1U << 1); // RST high
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <gpio_init+0x100>)
 80015fc:	2202      	movs	r2, #2
 80015fe:	619a      	str	r2, [r3, #24]

	// Buzzer pin (PC9) as output
	GPIOC->MODER &= ~(3U << 18);
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <gpio_init+0x104>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <gpio_init+0x104>)
 8001606:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800160a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1U << 18);
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <gpio_init+0x104>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a09      	ldr	r2, [pc, #36]	; (8001638 <gpio_init+0x104>)
 8001612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]
	GPIOC->OSPEEDR |= (3U << 18);
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <gpio_init+0x104>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <gpio_init+0x104>)
 800161e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001622:	6093      	str	r3, [r2, #8]
	buzzer_off();
 8001624:	f7ff fe68 	bl	80012f8 <buzzer_off>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400
 8001638:	40020800 	.word	0x40020800

0800163c <spi1_init>:

static void spi1_init(void) {
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <spi1_init+0x40>)
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <spi1_init+0x40>)
 8001646:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800164a:	6453      	str	r3, [r2, #68]	; 0x44
	SPI1->CR1 = 0;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <spi1_init+0x44>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
	SPI1->CR2 = 0;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <spi1_init+0x44>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
	// Master mode, fPCLK/8 (check your APB2 clock), SSM & SSI enabled
	SPI1->CR1 |= SPI_CR1_MSTR | (2U << 3) | SPI_CR1_SSM | SPI_CR1_SSI;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <spi1_init+0x44>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a08      	ldr	r2, [pc, #32]	; (8001680 <spi1_init+0x44>)
 800165e:	f443 7345 	orr.w	r3, r3, #788	; 0x314
 8001662:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE; // Enable SPI
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <spi1_init+0x44>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a05      	ldr	r2, [pc, #20]	; (8001680 <spi1_init+0x44>)
 800166a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013000 	.word	0x40013000

08001684 <DWT_Init>:

// ---------------- DWT Init ----------------
void DWT_Init(void) {
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <DWT_Init+0x2c>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <DWT_Init+0x2c>)
 800168e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001692:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <DWT_Init+0x30>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <DWT_Init+0x30>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <DWT_Init+0x30>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000edf0 	.word	0xe000edf0
 80016b4:	e0001000 	.word	0xe0001000

080016b8 <SystemClock_Config>:

// ---------------- Clock Config ----------------
void SystemClock_Config(void) {
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <SystemClock_Config+0x74>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1a      	ldr	r2, [pc, #104]	; (800172c <SystemClock_Config+0x74>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY))
 80016c8:	bf00      	nop
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <SystemClock_Config+0x74>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f9      	beq.n	80016ca <SystemClock_Config+0x12>
		;
	RCC->PLLCFGR = (8 << 0) | (72 << 6) | RCC_PLLCFGR_PLLSRC_HSI;
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <SystemClock_Config+0x74>)
 80016d8:	f241 2208 	movw	r2, #4616	; 0x1208
 80016dc:	605a      	str	r2, [r3, #4]
	RCC->CR |= RCC_CR_PLLON;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <SystemClock_Config+0x74>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <SystemClock_Config+0x74>)
 80016e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e8:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY))
 80016ea:	bf00      	nop
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <SystemClock_Config+0x74>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f9      	beq.n	80016ec <SystemClock_Config+0x34>
		;
	FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <SystemClock_Config+0x78>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <SystemClock_Config+0x78>)
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <SystemClock_Config+0x74>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a08      	ldr	r2, [pc, #32]	; (800172c <SystemClock_Config+0x74>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 8001710:	bf00      	nop
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <SystemClock_Config+0x74>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d1f9      	bne.n	8001712 <SystemClock_Config+0x5a>
		;
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40023c00 	.word	0x40023c00

08001734 <main>:

/* --- Main Function --- */
int main(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
	uint64_t current_uid_val = 0;
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9c7 2304 	strd	r2, r3, [r7, #16]
	char current_uid_str[11] = { 0 };
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t card_present_previously = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	77fb      	strb	r3, [r7, #31]

	// --- Hardware & Peripheral Initialization ---
	// Initialize water level sensor
	water_level_init();
 800175a:	f7ff fcb5 	bl	80010c8 <water_level_init>
	DHT11_Init();
 800175e:	f7ff fad7 	bl	8000d10 <DHT11_Init>
	TIM4_Config();
 8001762:	f7ff fafb 	bl	8000d5c <TIM4_Config>
	SystemClock_Config();
 8001766:	f7ff ffa7 	bl	80016b8 <SystemClock_Config>
	DWT_Init();
 800176a:	f7ff ff8b 	bl	8001684 <DWT_Init>
	gpio_init();
 800176e:	f7ff fee1 	bl	8001534 <gpio_init>
	spi1_init();
 8001772:	f7ff ff63 	bl	800163c <spi1_init>
	GPIO_Init(); // From IR.c
 8001776:	f7fe fda9 	bl	80002cc <GPIO_Init>
	TIM2_Init(); // From IR.c
 800177a:	f7fe fdcb 	bl	8000314 <TIM2_Init>
	timer6_init(); // Initialize Timer 6 for sensor data acquisition
 800177e:	f7ff feaf 	bl	80014e0 <timer6_init>
	Vibration_Init();
 8001782:	f000 f959 	bl	8001a38 <Vibration_Init>
	RFID_delay_ms(100);
 8001786:	2064      	movs	r0, #100	; 0x64
 8001788:	f7fe fe10 	bl	80003ac <RFID_delay_ms>
	LcdInit();
 800178c:	f7ff fb66 	bl	8000e5c <LcdInit>
	RFID_Init();
 8001790:	f7ff f872 	bl	8000878 <RFID_Init>

	// System starts in the LOCKED state
	unlocked = 0;
 8001794:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <main+0x1ac>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]

	// --- Initial LCD Message ---
	lprint(0x80, "  System Locked  ");
 800179a:	4952      	ldr	r1, [pc, #328]	; (80018e4 <main+0x1b0>)
 800179c:	2080      	movs	r0, #128	; 0x80
 800179e:	f7ff fc6b 	bl	8001078 <lprint>
	lprint(0xC0, " Tap Card to Use ");
 80017a2:	4951      	ldr	r1, [pc, #324]	; (80018e8 <main+0x1b4>)
 80017a4:	20c0      	movs	r0, #192	; 0xc0
 80017a6:	f7ff fc67 	bl	8001078 <lprint>

	while (1) {
		delay_ms(50); // Reduced main loop delay since sensor reading is now timer-based
 80017aa:	2032      	movs	r0, #50	; 0x32
 80017ac:	f7ff fd34 	bl	8001218 <delay_ms>

		// --- 1. Check for an RFID Card ---
		if (RFID_Scan(&current_uid_val, current_uid_str)) {
 80017b0:	1d3a      	adds	r2, r7, #4
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff f863 	bl	8000884 <RFID_Scan>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d03f      	beq.n	8001844 <main+0x110>
			// Process the card only ONCE per tap
			if (!card_present_previously) {
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d13e      	bne.n	8001848 <main+0x114>
				card_present_previously = 1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	77fb      	strb	r3, [r7, #31]

				// --- 2. Check if the Card is Authorized ---
				if (current_uid_val == AUTHORIZED_UID_1
 80017ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d2:	4946      	ldr	r1, [pc, #280]	; (80018ec <main+0x1b8>)
 80017d4:	2b83      	cmp	r3, #131	; 0x83
 80017d6:	bf08      	it	eq
 80017d8:	428a      	cmpeq	r2, r1
 80017da:	d006      	beq.n	80017ea <main+0xb6>
						|| current_uid_val == AUTHORIZED_UID_2) {
 80017dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017e0:	4943      	ldr	r1, [pc, #268]	; (80018f0 <main+0x1bc>)
 80017e2:	2b25      	cmp	r3, #37	; 0x25
 80017e4:	bf08      	it	eq
 80017e6:	428a      	cmpeq	r2, r1
 80017e8:	d12e      	bne.n	8001848 <main+0x114>

					// --- 3. Toggle the System State (Lock/Unlock) ---
					unlocked = !unlocked;
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <main+0x1ac>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <main+0x1ac>)
 80017fe:	701a      	strb	r2, [r3, #0]

					// --- 4. Update LCD and Reset State Based on New State ---
					if (unlocked) {
 8001800:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <main+0x1ac>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00e      	beq.n	8001828 <main+0xf4>
						lprint(0x80, " System Unlocked ");
 800180a:	493a      	ldr	r1, [pc, #232]	; (80018f4 <main+0x1c0>)
 800180c:	2080      	movs	r0, #128	; 0x80
 800180e:	f7ff fc33 	bl	8001078 <lprint>
						lprint(0xC0, "Sensor: .........");
 8001812:	4939      	ldr	r1, [pc, #228]	; (80018f8 <main+0x1c4>)
 8001814:	20c0      	movs	r0, #192	; 0xc0
 8001816:	f7ff fc2f 	bl	8001078 <lprint>

						// IMPORTANT: Reset flag on unlock to ignore detections
						// that happened while the system was locked.
						object_detected = 0;
 800181a:	4b38      	ldr	r3, [pc, #224]	; (80018fc <main+0x1c8>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
						data_update_flag = 0; // Reset data update flag
 8001820:	4b37      	ldr	r3, [pc, #220]	; (8001900 <main+0x1cc>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e00f      	b.n	8001848 <main+0x114>
					} else {
						lprint(0x80, "  System Locked  ");
 8001828:	492e      	ldr	r1, [pc, #184]	; (80018e4 <main+0x1b0>)
 800182a:	2080      	movs	r0, #128	; 0x80
 800182c:	f7ff fc24 	bl	8001078 <lprint>
						lprint(0xC0, " Tap Card to Use ");
 8001830:	492d      	ldr	r1, [pc, #180]	; (80018e8 <main+0x1b4>)
 8001832:	20c0      	movs	r0, #192	; 0xc0
 8001834:	f7ff fc20 	bl	8001078 <lprint>
						// Turn off all LEDs when system is locked
						all_leds_off();
 8001838:	f7ff fd8c 	bl	8001354 <all_leds_off>
						data_update_flag = 0; // Reset data update flag
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <main+0x1cc>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	e001      	b.n	8001848 <main+0x114>
					}
				}
			}
		} else {
			card_present_previously = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	77fb      	strb	r3, [r7, #31]
		}

		if (unlocked) {
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <main+0x1ac>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d015      	beq.n	800187e <main+0x14a>
			lprint(0xC7, "T:");
 8001852:	492c      	ldr	r1, [pc, #176]	; (8001904 <main+0x1d0>)
 8001854:	20c7      	movs	r0, #199	; 0xc7
 8001856:	f7ff fc0f 	bl	8001078 <lprint>
			lprint_num(0xC9, temperature_alert);
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <main+0x1d4>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4619      	mov	r1, r3
 8001862:	20c9      	movs	r0, #201	; 0xc9
 8001864:	f7ff fbec 	bl	8001040 <lprint_num>
			lprint(0xCC, "H:");
 8001868:	4928      	ldr	r1, [pc, #160]	; (800190c <main+0x1d8>)
 800186a:	20cc      	movs	r0, #204	; 0xcc
 800186c:	f7ff fc04 	bl	8001078 <lprint>
			lprint_num(0xCE, humidity_alert);
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <main+0x1dc>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4619      	mov	r1, r3
 8001878:	20ce      	movs	r0, #206	; 0xce
 800187a:	f7ff fbe1 	bl	8001040 <lprint_num>
		}

		// --- 5. Process Sensor Data and Perform Actions Based on Current State ---
		if (unlocked) {
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <main+0x1ac>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d028      	beq.n	80018da <main+0x1a6>

			if (data_update_flag) {
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <main+0x1cc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <main+0x172>
				data_update_flag = 0; // Clear the flag
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <main+0x1cc>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]

				// Update LED bar graph based on water percentage
				// Access volatile variables safely
				float current_water_percent = waterPercent;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <main+0x1e0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	61bb      	str	r3, [r7, #24]
				update_led_bar_graph(current_water_percent);
 800189e:	ed97 0a06 	vldr	s0, [r7, #24]
 80018a2:	f7ff fd73 	bl	800138c <update_led_bar_graph>
			}

			// Monitor IR sensor ONLY when unlocked
			if (object_detected) {
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <main+0x1c8>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00f      	beq.n	80018d0 <main+0x19c>
				lprint(0xC0, "IR:ON ");
 80018b0:	4919      	ldr	r1, [pc, #100]	; (8001918 <main+0x1e4>)
 80018b2:	20c0      	movs	r0, #192	; 0xc0
 80018b4:	f7ff fbe0 	bl	8001078 <lprint>

				buzzer_on();
 80018b8:	f7ff fd10 	bl	80012dc <buzzer_on>
				RFID_delay_ms(300); // Alarm beep for 300ms
 80018bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018c0:	f7fe fd74 	bl	80003ac <RFID_delay_ms>
				buzzer_off();
 80018c4:	f7ff fd18 	bl	80012f8 <buzzer_off>

				object_detected = 0; // Reset flag after processing the alert
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <main+0x1c8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	e76c      	b.n	80017aa <main+0x76>
			} else {
				lprint(0xC0, "IR:OFF");
 80018d0:	4912      	ldr	r1, [pc, #72]	; (800191c <main+0x1e8>)
 80018d2:	20c0      	movs	r0, #192	; 0xc0
 80018d4:	f7ff fbd0 	bl	8001078 <lprint>
 80018d8:	e767      	b.n	80017aa <main+0x76>
			}
		} else {
			// When system is locked, turn off all LEDs
			all_leds_off();
 80018da:	f7ff fd3b 	bl	8001354 <all_leds_off>
		delay_ms(50); // Reduced main loop delay since sensor reading is now timer-based
 80018de:	e764      	b.n	80017aa <main+0x76>
 80018e0:	200000a8 	.word	0x200000a8
 80018e4:	08002558 	.word	0x08002558
 80018e8:	0800256c 	.word	0x0800256c
 80018ec:	6b2f21e6 	.word	0x6b2f21e6
 80018f0:	f363af1a 	.word	0xf363af1a
 80018f4:	08002580 	.word	0x08002580
 80018f8:	08002594 	.word	0x08002594
 80018fc:	20000084 	.word	0x20000084
 8001900:	200000a9 	.word	0x200000a9
 8001904:	080025a8 	.word	0x080025a8
 8001908:	20000096 	.word	0x20000096
 800190c:	080025ac 	.word	0x080025ac
 8001910:	20000097 	.word	0x20000097
 8001914:	200000a4 	.word	0x200000a4
 8001918:	080025b0 	.word	0x080025b0
 800191c:	080025b8 	.word	0x080025b8

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f000 f950 	bl	8001bf4 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20020000 	.word	0x20020000
 8001980:	00000400 	.word	0x00000400
 8001984:	200000ac 	.word	0x200000ac
 8001988:	200000c8 	.word	0x200000c8

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <delay_ms>:

volatile uint8_t beep_5_done = 0;

volatile uint8_t beep_10_done = 0;

static void delay_ms(uint32_t ms) {
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

    extern uint32_t SystemCoreClock;

    uint32_t ticks = (SystemCoreClock / 1000) * ms;
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <delay_ms+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <delay_ms+0x44>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	099a      	lsrs	r2, r3, #6
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	60fb      	str	r3, [r7, #12]

    uint32_t start = DWT->CYCCNT;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <delay_ms+0x48>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - start) < ticks);
 8001a0e:	bf00      	nop
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <delay_ms+0x48>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d8f8      	bhi.n	8001a10 <delay_ms+0x24>

}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	10624dd3 	.word	0x10624dd3
 8001a34:	e0001000 	.word	0xe0001000

08001a38 <Vibration_Init>:

void Vibration_Init(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0

    // PA3 as input (vibration sensor)

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <Vibration_Init+0x9c>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <Vibration_Init+0x9c>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOA->MODER &= ~(3 << (3 * 2));
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <Vibration_Init+0xa0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <Vibration_Init+0xa0>)
 8001a4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a52:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR &= ~(3 << (3 * 2));
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <Vibration_Init+0xa0>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <Vibration_Init+0xa0>)
 8001a5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a5e:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR |= (2 << (3 * 2));  // Pull-down
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <Vibration_Init+0xa0>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <Vibration_Init+0xa0>)
 8001a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6a:	60d3      	str	r3, [r2, #12]

    // PC9 buzzer

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <Vibration_Init+0x9c>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <Vibration_Init+0x9c>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOC->MODER &= ~(3 << (9 * 2));
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <Vibration_Init+0xa4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <Vibration_Init+0xa4>)
 8001a7e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001a82:	6013      	str	r3, [r2, #0]

    GPIOC->MODER |= (1 << (9 * 2));
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <Vibration_Init+0xa4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <Vibration_Init+0xa4>)
 8001a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]

    // EXTI3 interrupt

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <Vibration_Init+0x9c>)
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <Vibration_Init+0x9c>)
 8001a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9a:	6453      	str	r3, [r2, #68]	; 0x44

    SYSCFG->EXTICR[0] &= ~(0xF << 12);
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <Vibration_Init+0xa8>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <Vibration_Init+0xa8>)
 8001aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001aa6:	6093      	str	r3, [r2, #8]

    SYSCFG->EXTICR[0] |= (0 << 12);  // PA3
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <Vibration_Init+0xa8>)
 8001aaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <Vibration_Init+0xa8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	6093      	str	r3, [r2, #8]

    EXTI->IMR |= (1 << 3);
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <Vibration_Init+0xac>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <Vibration_Init+0xac>)
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	6013      	str	r3, [r2, #0]

    EXTI->RTSR |= (1 << 3);
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <Vibration_Init+0xac>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <Vibration_Init+0xac>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(EXTI3_IRQn);
 8001ac8:	2009      	movs	r0, #9
 8001aca:	f7ff ff71 	bl	80019b0 <__NVIC_EnableIRQ>

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

    if (EXTI->PR & (1 << 3)) {
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <EXTI3_IRQHandler+0xa4>)
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d047      	beq.n	8001b88 <EXTI3_IRQHandler+0xa0>

        vibration_count++;
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <EXTI3_IRQHandler+0xa8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <EXTI3_IRQHandler+0xa8>)
 8001b00:	6013      	str	r3, [r2, #0]

        delay_ms(50);
 8001b02:	2032      	movs	r0, #50	; 0x32
 8001b04:	f7ff ff72 	bl	80019ec <delay_ms>

        //lprint(0xC0, "V:");
       // lprint_num(0xC2, vibration_count);
        if (vibration_count >= 5 && !beep_5_done) {
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <EXTI3_IRQHandler+0xa8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d913      	bls.n	8001b38 <EXTI3_IRQHandler+0x50>
 8001b10:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <EXTI3_IRQHandler+0xac>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10e      	bne.n	8001b38 <EXTI3_IRQHandler+0x50>
            beep_5_done = 1;
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <EXTI3_IRQHandler+0xac>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]

            GPIOC->BSRR = GPIO_BSRR_BS9;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <EXTI3_IRQHandler+0xb0>)
 8001b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b26:	619a      	str	r2, [r3, #24]

            delay_ms(500);
 8001b28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b2c:	f7ff ff5e 	bl	80019ec <delay_ms>

            GPIOC->BSRR = GPIO_BSRR_BR9;
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <EXTI3_IRQHandler+0xb0>)
 8001b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b36:	619a      	str	r2, [r3, #24]

        }

        if (vibration_count >= 10 && !beep_10_done) {
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <EXTI3_IRQHandler+0xa8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b09      	cmp	r3, #9
 8001b3e:	d913      	bls.n	8001b68 <EXTI3_IRQHandler+0x80>
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <EXTI3_IRQHandler+0xb4>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10e      	bne.n	8001b68 <EXTI3_IRQHandler+0x80>

            beep_10_done = 1;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <EXTI3_IRQHandler+0xb4>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]

            GPIOC->BSRR = GPIO_BSRR_BS9;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <EXTI3_IRQHandler+0xb0>)
 8001b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b56:	619a      	str	r2, [r3, #24]

            delay_ms(1000);
 8001b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b5c:	f7ff ff46 	bl	80019ec <delay_ms>

            GPIOC->BSRR = GPIO_BSRR_BR9;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <EXTI3_IRQHandler+0xb0>)
 8001b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b66:	619a      	str	r2, [r3, #24]

        }

        if (vibration_count >= 15) {
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <EXTI3_IRQHandler+0xa8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b0e      	cmp	r3, #14
 8001b6e:	d908      	bls.n	8001b82 <EXTI3_IRQHandler+0x9a>

            vibration_count = 0;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <EXTI3_IRQHandler+0xa8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

            beep_5_done = 0;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <EXTI3_IRQHandler+0xac>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]

            beep_10_done = 0;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <EXTI3_IRQHandler+0xb4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]

            //lprint(0xC0, "V:0  ");

        }

        EXTI->PR = (1 << 3); // clear interrupt
 8001b82:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <EXTI3_IRQHandler+0xa4>)
 8001b84:	2208      	movs	r2, #8
 8001b86:	615a      	str	r2, [r3, #20]

    }

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40013c00 	.word	0x40013c00
 8001b90:	200000b0 	.word	0x200000b0
 8001b94:	200000b4 	.word	0x200000b4
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	200000b5 	.word	0x200000b5

08001ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba4:	f7ff fef2 	bl	800198c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <LoopForever+0xe>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <LoopForever+0x16>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bce:	f000 f817 	bl	8001c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd2:	f7ff fdaf 	bl	8001734 <main>

08001bd6 <LoopForever>:

LoopForever:
  b LoopForever
 8001bd6:	e7fe      	b.n	8001bd6 <LoopForever>
  ldr   r0, =_estack
 8001bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001be4:	080025fc 	.word	0x080025fc
  ldr r2, =_sbss
 8001be8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001bec:	200000c8 	.word	0x200000c8

08001bf0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC_IRQHandler>
	...

08001bf4 <__errno>:
 8001bf4:	4b01      	ldr	r3, [pc, #4]	; (8001bfc <__errno+0x8>)
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000004 	.word	0x20000004

08001c00 <__libc_init_array>:
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	4d0d      	ldr	r5, [pc, #52]	; (8001c38 <__libc_init_array+0x38>)
 8001c04:	4c0d      	ldr	r4, [pc, #52]	; (8001c3c <__libc_init_array+0x3c>)
 8001c06:	1b64      	subs	r4, r4, r5
 8001c08:	10a4      	asrs	r4, r4, #2
 8001c0a:	2600      	movs	r6, #0
 8001c0c:	42a6      	cmp	r6, r4
 8001c0e:	d109      	bne.n	8001c24 <__libc_init_array+0x24>
 8001c10:	4d0b      	ldr	r5, [pc, #44]	; (8001c40 <__libc_init_array+0x40>)
 8001c12:	4c0c      	ldr	r4, [pc, #48]	; (8001c44 <__libc_init_array+0x44>)
 8001c14:	f000 fc86 	bl	8002524 <_init>
 8001c18:	1b64      	subs	r4, r4, r5
 8001c1a:	10a4      	asrs	r4, r4, #2
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	42a6      	cmp	r6, r4
 8001c20:	d105      	bne.n	8001c2e <__libc_init_array+0x2e>
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
 8001c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c28:	4798      	blx	r3
 8001c2a:	3601      	adds	r6, #1
 8001c2c:	e7ee      	b.n	8001c0c <__libc_init_array+0xc>
 8001c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c32:	4798      	blx	r3
 8001c34:	3601      	adds	r6, #1
 8001c36:	e7f2      	b.n	8001c1e <__libc_init_array+0x1e>
 8001c38:	080025f4 	.word	0x080025f4
 8001c3c:	080025f4 	.word	0x080025f4
 8001c40:	080025f4 	.word	0x080025f4
 8001c44:	080025f8 	.word	0x080025f8

08001c48 <siprintf>:
 8001c48:	b40e      	push	{r1, r2, r3}
 8001c4a:	b500      	push	{lr}
 8001c4c:	b09c      	sub	sp, #112	; 0x70
 8001c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8001c50:	9002      	str	r0, [sp, #8]
 8001c52:	9006      	str	r0, [sp, #24]
 8001c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001c58:	4809      	ldr	r0, [pc, #36]	; (8001c80 <siprintf+0x38>)
 8001c5a:	9107      	str	r1, [sp, #28]
 8001c5c:	9104      	str	r1, [sp, #16]
 8001c5e:	4909      	ldr	r1, [pc, #36]	; (8001c84 <siprintf+0x3c>)
 8001c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c64:	9105      	str	r1, [sp, #20]
 8001c66:	6800      	ldr	r0, [r0, #0]
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	a902      	add	r1, sp, #8
 8001c6c:	f000 f868 	bl	8001d40 <_svfiprintf_r>
 8001c70:	9b02      	ldr	r3, [sp, #8]
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	b01c      	add	sp, #112	; 0x70
 8001c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c7c:	b003      	add	sp, #12
 8001c7e:	4770      	bx	lr
 8001c80:	20000004 	.word	0x20000004
 8001c84:	ffff0208 	.word	0xffff0208

08001c88 <__ssputs_r>:
 8001c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c8c:	688e      	ldr	r6, [r1, #8]
 8001c8e:	429e      	cmp	r6, r3
 8001c90:	4682      	mov	sl, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	4690      	mov	r8, r2
 8001c96:	461f      	mov	r7, r3
 8001c98:	d838      	bhi.n	8001d0c <__ssputs_r+0x84>
 8001c9a:	898a      	ldrh	r2, [r1, #12]
 8001c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ca0:	d032      	beq.n	8001d08 <__ssputs_r+0x80>
 8001ca2:	6825      	ldr	r5, [r4, #0]
 8001ca4:	6909      	ldr	r1, [r1, #16]
 8001ca6:	eba5 0901 	sub.w	r9, r5, r1
 8001caa:	6965      	ldr	r5, [r4, #20]
 8001cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	444b      	add	r3, r9
 8001cb8:	106d      	asrs	r5, r5, #1
 8001cba:	429d      	cmp	r5, r3
 8001cbc:	bf38      	it	cc
 8001cbe:	461d      	movcc	r5, r3
 8001cc0:	0553      	lsls	r3, r2, #21
 8001cc2:	d531      	bpl.n	8001d28 <__ssputs_r+0xa0>
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f000 fb63 	bl	8002390 <_malloc_r>
 8001cca:	4606      	mov	r6, r0
 8001ccc:	b950      	cbnz	r0, 8001ce4 <__ssputs_r+0x5c>
 8001cce:	230c      	movs	r3, #12
 8001cd0:	f8ca 3000 	str.w	r3, [sl]
 8001cd4:	89a3      	ldrh	r3, [r4, #12]
 8001cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cda:	81a3      	strh	r3, [r4, #12]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ce4:	6921      	ldr	r1, [r4, #16]
 8001ce6:	464a      	mov	r2, r9
 8001ce8:	f000 fabe 	bl	8002268 <memcpy>
 8001cec:	89a3      	ldrh	r3, [r4, #12]
 8001cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf6:	81a3      	strh	r3, [r4, #12]
 8001cf8:	6126      	str	r6, [r4, #16]
 8001cfa:	6165      	str	r5, [r4, #20]
 8001cfc:	444e      	add	r6, r9
 8001cfe:	eba5 0509 	sub.w	r5, r5, r9
 8001d02:	6026      	str	r6, [r4, #0]
 8001d04:	60a5      	str	r5, [r4, #8]
 8001d06:	463e      	mov	r6, r7
 8001d08:	42be      	cmp	r6, r7
 8001d0a:	d900      	bls.n	8001d0e <__ssputs_r+0x86>
 8001d0c:	463e      	mov	r6, r7
 8001d0e:	6820      	ldr	r0, [r4, #0]
 8001d10:	4632      	mov	r2, r6
 8001d12:	4641      	mov	r1, r8
 8001d14:	f000 fab6 	bl	8002284 <memmove>
 8001d18:	68a3      	ldr	r3, [r4, #8]
 8001d1a:	1b9b      	subs	r3, r3, r6
 8001d1c:	60a3      	str	r3, [r4, #8]
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	4433      	add	r3, r6
 8001d22:	6023      	str	r3, [r4, #0]
 8001d24:	2000      	movs	r0, #0
 8001d26:	e7db      	b.n	8001ce0 <__ssputs_r+0x58>
 8001d28:	462a      	mov	r2, r5
 8001d2a:	f000 fba5 	bl	8002478 <_realloc_r>
 8001d2e:	4606      	mov	r6, r0
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d1e1      	bne.n	8001cf8 <__ssputs_r+0x70>
 8001d34:	6921      	ldr	r1, [r4, #16]
 8001d36:	4650      	mov	r0, sl
 8001d38:	f000 fabe 	bl	80022b8 <_free_r>
 8001d3c:	e7c7      	b.n	8001cce <__ssputs_r+0x46>
	...

08001d40 <_svfiprintf_r>:
 8001d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d44:	4698      	mov	r8, r3
 8001d46:	898b      	ldrh	r3, [r1, #12]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	b09d      	sub	sp, #116	; 0x74
 8001d4c:	4607      	mov	r7, r0
 8001d4e:	460d      	mov	r5, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	d50e      	bpl.n	8001d72 <_svfiprintf_r+0x32>
 8001d54:	690b      	ldr	r3, [r1, #16]
 8001d56:	b963      	cbnz	r3, 8001d72 <_svfiprintf_r+0x32>
 8001d58:	2140      	movs	r1, #64	; 0x40
 8001d5a:	f000 fb19 	bl	8002390 <_malloc_r>
 8001d5e:	6028      	str	r0, [r5, #0]
 8001d60:	6128      	str	r0, [r5, #16]
 8001d62:	b920      	cbnz	r0, 8001d6e <_svfiprintf_r+0x2e>
 8001d64:	230c      	movs	r3, #12
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	e0d1      	b.n	8001f12 <_svfiprintf_r+0x1d2>
 8001d6e:	2340      	movs	r3, #64	; 0x40
 8001d70:	616b      	str	r3, [r5, #20]
 8001d72:	2300      	movs	r3, #0
 8001d74:	9309      	str	r3, [sp, #36]	; 0x24
 8001d76:	2320      	movs	r3, #32
 8001d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d80:	2330      	movs	r3, #48	; 0x30
 8001d82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001f2c <_svfiprintf_r+0x1ec>
 8001d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d8a:	f04f 0901 	mov.w	r9, #1
 8001d8e:	4623      	mov	r3, r4
 8001d90:	469a      	mov	sl, r3
 8001d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d96:	b10a      	cbz	r2, 8001d9c <_svfiprintf_r+0x5c>
 8001d98:	2a25      	cmp	r2, #37	; 0x25
 8001d9a:	d1f9      	bne.n	8001d90 <_svfiprintf_r+0x50>
 8001d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8001da0:	d00b      	beq.n	8001dba <_svfiprintf_r+0x7a>
 8001da2:	465b      	mov	r3, fp
 8001da4:	4622      	mov	r2, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	4638      	mov	r0, r7
 8001daa:	f7ff ff6d 	bl	8001c88 <__ssputs_r>
 8001dae:	3001      	adds	r0, #1
 8001db0:	f000 80aa 	beq.w	8001f08 <_svfiprintf_r+0x1c8>
 8001db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001db6:	445a      	add	r2, fp
 8001db8:	9209      	str	r2, [sp, #36]	; 0x24
 8001dba:	f89a 3000 	ldrb.w	r3, [sl]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80a2 	beq.w	8001f08 <_svfiprintf_r+0x1c8>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001dce:	f10a 0a01 	add.w	sl, sl, #1
 8001dd2:	9304      	str	r3, [sp, #16]
 8001dd4:	9307      	str	r3, [sp, #28]
 8001dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dda:	931a      	str	r3, [sp, #104]	; 0x68
 8001ddc:	4654      	mov	r4, sl
 8001dde:	2205      	movs	r2, #5
 8001de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001de4:	4851      	ldr	r0, [pc, #324]	; (8001f2c <_svfiprintf_r+0x1ec>)
 8001de6:	f7fe fa03 	bl	80001f0 <memchr>
 8001dea:	9a04      	ldr	r2, [sp, #16]
 8001dec:	b9d8      	cbnz	r0, 8001e26 <_svfiprintf_r+0xe6>
 8001dee:	06d0      	lsls	r0, r2, #27
 8001df0:	bf44      	itt	mi
 8001df2:	2320      	movmi	r3, #32
 8001df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001df8:	0711      	lsls	r1, r2, #28
 8001dfa:	bf44      	itt	mi
 8001dfc:	232b      	movmi	r3, #43	; 0x2b
 8001dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e02:	f89a 3000 	ldrb.w	r3, [sl]
 8001e06:	2b2a      	cmp	r3, #42	; 0x2a
 8001e08:	d015      	beq.n	8001e36 <_svfiprintf_r+0xf6>
 8001e0a:	9a07      	ldr	r2, [sp, #28]
 8001e0c:	4654      	mov	r4, sl
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f04f 0c0a 	mov.w	ip, #10
 8001e14:	4621      	mov	r1, r4
 8001e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e1a:	3b30      	subs	r3, #48	; 0x30
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d94e      	bls.n	8001ebe <_svfiprintf_r+0x17e>
 8001e20:	b1b0      	cbz	r0, 8001e50 <_svfiprintf_r+0x110>
 8001e22:	9207      	str	r2, [sp, #28]
 8001e24:	e014      	b.n	8001e50 <_svfiprintf_r+0x110>
 8001e26:	eba0 0308 	sub.w	r3, r0, r8
 8001e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	9304      	str	r3, [sp, #16]
 8001e32:	46a2      	mov	sl, r4
 8001e34:	e7d2      	b.n	8001ddc <_svfiprintf_r+0x9c>
 8001e36:	9b03      	ldr	r3, [sp, #12]
 8001e38:	1d19      	adds	r1, r3, #4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	9103      	str	r1, [sp, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bfbb      	ittet	lt
 8001e42:	425b      	neglt	r3, r3
 8001e44:	f042 0202 	orrlt.w	r2, r2, #2
 8001e48:	9307      	strge	r3, [sp, #28]
 8001e4a:	9307      	strlt	r3, [sp, #28]
 8001e4c:	bfb8      	it	lt
 8001e4e:	9204      	strlt	r2, [sp, #16]
 8001e50:	7823      	ldrb	r3, [r4, #0]
 8001e52:	2b2e      	cmp	r3, #46	; 0x2e
 8001e54:	d10c      	bne.n	8001e70 <_svfiprintf_r+0x130>
 8001e56:	7863      	ldrb	r3, [r4, #1]
 8001e58:	2b2a      	cmp	r3, #42	; 0x2a
 8001e5a:	d135      	bne.n	8001ec8 <_svfiprintf_r+0x188>
 8001e5c:	9b03      	ldr	r3, [sp, #12]
 8001e5e:	1d1a      	adds	r2, r3, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	9203      	str	r2, [sp, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bfb8      	it	lt
 8001e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e6c:	3402      	adds	r4, #2
 8001e6e:	9305      	str	r3, [sp, #20]
 8001e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001f3c <_svfiprintf_r+0x1fc>
 8001e74:	7821      	ldrb	r1, [r4, #0]
 8001e76:	2203      	movs	r2, #3
 8001e78:	4650      	mov	r0, sl
 8001e7a:	f7fe f9b9 	bl	80001f0 <memchr>
 8001e7e:	b140      	cbz	r0, 8001e92 <_svfiprintf_r+0x152>
 8001e80:	2340      	movs	r3, #64	; 0x40
 8001e82:	eba0 000a 	sub.w	r0, r0, sl
 8001e86:	fa03 f000 	lsl.w	r0, r3, r0
 8001e8a:	9b04      	ldr	r3, [sp, #16]
 8001e8c:	4303      	orrs	r3, r0
 8001e8e:	3401      	adds	r4, #1
 8001e90:	9304      	str	r3, [sp, #16]
 8001e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e96:	4826      	ldr	r0, [pc, #152]	; (8001f30 <_svfiprintf_r+0x1f0>)
 8001e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e9c:	2206      	movs	r2, #6
 8001e9e:	f7fe f9a7 	bl	80001f0 <memchr>
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d038      	beq.n	8001f18 <_svfiprintf_r+0x1d8>
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <_svfiprintf_r+0x1f4>)
 8001ea8:	bb1b      	cbnz	r3, 8001ef2 <_svfiprintf_r+0x1b2>
 8001eaa:	9b03      	ldr	r3, [sp, #12]
 8001eac:	3307      	adds	r3, #7
 8001eae:	f023 0307 	bic.w	r3, r3, #7
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	9303      	str	r3, [sp, #12]
 8001eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eb8:	4433      	add	r3, r6
 8001eba:	9309      	str	r3, [sp, #36]	; 0x24
 8001ebc:	e767      	b.n	8001d8e <_svfiprintf_r+0x4e>
 8001ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	e7a5      	b.n	8001e14 <_svfiprintf_r+0xd4>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	3401      	adds	r4, #1
 8001ecc:	9305      	str	r3, [sp, #20]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f04f 0c0a 	mov.w	ip, #10
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eda:	3a30      	subs	r2, #48	; 0x30
 8001edc:	2a09      	cmp	r2, #9
 8001ede:	d903      	bls.n	8001ee8 <_svfiprintf_r+0x1a8>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0c5      	beq.n	8001e70 <_svfiprintf_r+0x130>
 8001ee4:	9105      	str	r1, [sp, #20]
 8001ee6:	e7c3      	b.n	8001e70 <_svfiprintf_r+0x130>
 8001ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001eec:	4604      	mov	r4, r0
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e7f0      	b.n	8001ed4 <_svfiprintf_r+0x194>
 8001ef2:	ab03      	add	r3, sp, #12
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	462a      	mov	r2, r5
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <_svfiprintf_r+0x1f8>)
 8001efa:	a904      	add	r1, sp, #16
 8001efc:	4638      	mov	r0, r7
 8001efe:	f3af 8000 	nop.w
 8001f02:	1c42      	adds	r2, r0, #1
 8001f04:	4606      	mov	r6, r0
 8001f06:	d1d6      	bne.n	8001eb6 <_svfiprintf_r+0x176>
 8001f08:	89ab      	ldrh	r3, [r5, #12]
 8001f0a:	065b      	lsls	r3, r3, #25
 8001f0c:	f53f af2c 	bmi.w	8001d68 <_svfiprintf_r+0x28>
 8001f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f12:	b01d      	add	sp, #116	; 0x74
 8001f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f18:	ab03      	add	r3, sp, #12
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	462a      	mov	r2, r5
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <_svfiprintf_r+0x1f8>)
 8001f20:	a904      	add	r1, sp, #16
 8001f22:	4638      	mov	r0, r7
 8001f24:	f000 f87a 	bl	800201c <_printf_i>
 8001f28:	e7eb      	b.n	8001f02 <_svfiprintf_r+0x1c2>
 8001f2a:	bf00      	nop
 8001f2c:	080025bf 	.word	0x080025bf
 8001f30:	080025c9 	.word	0x080025c9
 8001f34:	00000000 	.word	0x00000000
 8001f38:	08001c89 	.word	0x08001c89
 8001f3c:	080025c5 	.word	0x080025c5

08001f40 <_printf_common>:
 8001f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f44:	4616      	mov	r6, r2
 8001f46:	4699      	mov	r9, r3
 8001f48:	688a      	ldr	r2, [r1, #8]
 8001f4a:	690b      	ldr	r3, [r1, #16]
 8001f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f50:	4293      	cmp	r3, r2
 8001f52:	bfb8      	it	lt
 8001f54:	4613      	movlt	r3, r2
 8001f56:	6033      	str	r3, [r6, #0]
 8001f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f5c:	4607      	mov	r7, r0
 8001f5e:	460c      	mov	r4, r1
 8001f60:	b10a      	cbz	r2, 8001f66 <_printf_common+0x26>
 8001f62:	3301      	adds	r3, #1
 8001f64:	6033      	str	r3, [r6, #0]
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	0699      	lsls	r1, r3, #26
 8001f6a:	bf42      	ittt	mi
 8001f6c:	6833      	ldrmi	r3, [r6, #0]
 8001f6e:	3302      	addmi	r3, #2
 8001f70:	6033      	strmi	r3, [r6, #0]
 8001f72:	6825      	ldr	r5, [r4, #0]
 8001f74:	f015 0506 	ands.w	r5, r5, #6
 8001f78:	d106      	bne.n	8001f88 <_printf_common+0x48>
 8001f7a:	f104 0a19 	add.w	sl, r4, #25
 8001f7e:	68e3      	ldr	r3, [r4, #12]
 8001f80:	6832      	ldr	r2, [r6, #0]
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	42ab      	cmp	r3, r5
 8001f86:	dc26      	bgt.n	8001fd6 <_printf_common+0x96>
 8001f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f8c:	1e13      	subs	r3, r2, #0
 8001f8e:	6822      	ldr	r2, [r4, #0]
 8001f90:	bf18      	it	ne
 8001f92:	2301      	movne	r3, #1
 8001f94:	0692      	lsls	r2, r2, #26
 8001f96:	d42b      	bmi.n	8001ff0 <_printf_common+0xb0>
 8001f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f9c:	4649      	mov	r1, r9
 8001f9e:	4638      	mov	r0, r7
 8001fa0:	47c0      	blx	r8
 8001fa2:	3001      	adds	r0, #1
 8001fa4:	d01e      	beq.n	8001fe4 <_printf_common+0xa4>
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	68e5      	ldr	r5, [r4, #12]
 8001faa:	6832      	ldr	r2, [r6, #0]
 8001fac:	f003 0306 	and.w	r3, r3, #6
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	bf08      	it	eq
 8001fb4:	1aad      	subeq	r5, r5, r2
 8001fb6:	68a3      	ldr	r3, [r4, #8]
 8001fb8:	6922      	ldr	r2, [r4, #16]
 8001fba:	bf0c      	ite	eq
 8001fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fc0:	2500      	movne	r5, #0
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	bfc4      	itt	gt
 8001fc6:	1a9b      	subgt	r3, r3, r2
 8001fc8:	18ed      	addgt	r5, r5, r3
 8001fca:	2600      	movs	r6, #0
 8001fcc:	341a      	adds	r4, #26
 8001fce:	42b5      	cmp	r5, r6
 8001fd0:	d11a      	bne.n	8002008 <_printf_common+0xc8>
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e008      	b.n	8001fe8 <_printf_common+0xa8>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	4652      	mov	r2, sl
 8001fda:	4649      	mov	r1, r9
 8001fdc:	4638      	mov	r0, r7
 8001fde:	47c0      	blx	r8
 8001fe0:	3001      	adds	r0, #1
 8001fe2:	d103      	bne.n	8001fec <_printf_common+0xac>
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fec:	3501      	adds	r5, #1
 8001fee:	e7c6      	b.n	8001f7e <_printf_common+0x3e>
 8001ff0:	18e1      	adds	r1, r4, r3
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	2030      	movs	r0, #48	; 0x30
 8001ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ffa:	4422      	add	r2, r4
 8001ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002004:	3302      	adds	r3, #2
 8002006:	e7c7      	b.n	8001f98 <_printf_common+0x58>
 8002008:	2301      	movs	r3, #1
 800200a:	4622      	mov	r2, r4
 800200c:	4649      	mov	r1, r9
 800200e:	4638      	mov	r0, r7
 8002010:	47c0      	blx	r8
 8002012:	3001      	adds	r0, #1
 8002014:	d0e6      	beq.n	8001fe4 <_printf_common+0xa4>
 8002016:	3601      	adds	r6, #1
 8002018:	e7d9      	b.n	8001fce <_printf_common+0x8e>
	...

0800201c <_printf_i>:
 800201c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002020:	7e0f      	ldrb	r7, [r1, #24]
 8002022:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002024:	2f78      	cmp	r7, #120	; 0x78
 8002026:	4691      	mov	r9, r2
 8002028:	4680      	mov	r8, r0
 800202a:	460c      	mov	r4, r1
 800202c:	469a      	mov	sl, r3
 800202e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002032:	d807      	bhi.n	8002044 <_printf_i+0x28>
 8002034:	2f62      	cmp	r7, #98	; 0x62
 8002036:	d80a      	bhi.n	800204e <_printf_i+0x32>
 8002038:	2f00      	cmp	r7, #0
 800203a:	f000 80d8 	beq.w	80021ee <_printf_i+0x1d2>
 800203e:	2f58      	cmp	r7, #88	; 0x58
 8002040:	f000 80a3 	beq.w	800218a <_printf_i+0x16e>
 8002044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800204c:	e03a      	b.n	80020c4 <_printf_i+0xa8>
 800204e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002052:	2b15      	cmp	r3, #21
 8002054:	d8f6      	bhi.n	8002044 <_printf_i+0x28>
 8002056:	a101      	add	r1, pc, #4	; (adr r1, 800205c <_printf_i+0x40>)
 8002058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800205c:	080020b5 	.word	0x080020b5
 8002060:	080020c9 	.word	0x080020c9
 8002064:	08002045 	.word	0x08002045
 8002068:	08002045 	.word	0x08002045
 800206c:	08002045 	.word	0x08002045
 8002070:	08002045 	.word	0x08002045
 8002074:	080020c9 	.word	0x080020c9
 8002078:	08002045 	.word	0x08002045
 800207c:	08002045 	.word	0x08002045
 8002080:	08002045 	.word	0x08002045
 8002084:	08002045 	.word	0x08002045
 8002088:	080021d5 	.word	0x080021d5
 800208c:	080020f9 	.word	0x080020f9
 8002090:	080021b7 	.word	0x080021b7
 8002094:	08002045 	.word	0x08002045
 8002098:	08002045 	.word	0x08002045
 800209c:	080021f7 	.word	0x080021f7
 80020a0:	08002045 	.word	0x08002045
 80020a4:	080020f9 	.word	0x080020f9
 80020a8:	08002045 	.word	0x08002045
 80020ac:	08002045 	.word	0x08002045
 80020b0:	080021bf 	.word	0x080021bf
 80020b4:	682b      	ldr	r3, [r5, #0]
 80020b6:	1d1a      	adds	r2, r3, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	602a      	str	r2, [r5, #0]
 80020bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0a3      	b.n	8002210 <_printf_i+0x1f4>
 80020c8:	6820      	ldr	r0, [r4, #0]
 80020ca:	6829      	ldr	r1, [r5, #0]
 80020cc:	0606      	lsls	r6, r0, #24
 80020ce:	f101 0304 	add.w	r3, r1, #4
 80020d2:	d50a      	bpl.n	80020ea <_printf_i+0xce>
 80020d4:	680e      	ldr	r6, [r1, #0]
 80020d6:	602b      	str	r3, [r5, #0]
 80020d8:	2e00      	cmp	r6, #0
 80020da:	da03      	bge.n	80020e4 <_printf_i+0xc8>
 80020dc:	232d      	movs	r3, #45	; 0x2d
 80020de:	4276      	negs	r6, r6
 80020e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020e4:	485e      	ldr	r0, [pc, #376]	; (8002260 <_printf_i+0x244>)
 80020e6:	230a      	movs	r3, #10
 80020e8:	e019      	b.n	800211e <_printf_i+0x102>
 80020ea:	680e      	ldr	r6, [r1, #0]
 80020ec:	602b      	str	r3, [r5, #0]
 80020ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020f2:	bf18      	it	ne
 80020f4:	b236      	sxthne	r6, r6
 80020f6:	e7ef      	b.n	80020d8 <_printf_i+0xbc>
 80020f8:	682b      	ldr	r3, [r5, #0]
 80020fa:	6820      	ldr	r0, [r4, #0]
 80020fc:	1d19      	adds	r1, r3, #4
 80020fe:	6029      	str	r1, [r5, #0]
 8002100:	0601      	lsls	r1, r0, #24
 8002102:	d501      	bpl.n	8002108 <_printf_i+0xec>
 8002104:	681e      	ldr	r6, [r3, #0]
 8002106:	e002      	b.n	800210e <_printf_i+0xf2>
 8002108:	0646      	lsls	r6, r0, #25
 800210a:	d5fb      	bpl.n	8002104 <_printf_i+0xe8>
 800210c:	881e      	ldrh	r6, [r3, #0]
 800210e:	4854      	ldr	r0, [pc, #336]	; (8002260 <_printf_i+0x244>)
 8002110:	2f6f      	cmp	r7, #111	; 0x6f
 8002112:	bf0c      	ite	eq
 8002114:	2308      	moveq	r3, #8
 8002116:	230a      	movne	r3, #10
 8002118:	2100      	movs	r1, #0
 800211a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800211e:	6865      	ldr	r5, [r4, #4]
 8002120:	60a5      	str	r5, [r4, #8]
 8002122:	2d00      	cmp	r5, #0
 8002124:	bfa2      	ittt	ge
 8002126:	6821      	ldrge	r1, [r4, #0]
 8002128:	f021 0104 	bicge.w	r1, r1, #4
 800212c:	6021      	strge	r1, [r4, #0]
 800212e:	b90e      	cbnz	r6, 8002134 <_printf_i+0x118>
 8002130:	2d00      	cmp	r5, #0
 8002132:	d04d      	beq.n	80021d0 <_printf_i+0x1b4>
 8002134:	4615      	mov	r5, r2
 8002136:	fbb6 f1f3 	udiv	r1, r6, r3
 800213a:	fb03 6711 	mls	r7, r3, r1, r6
 800213e:	5dc7      	ldrb	r7, [r0, r7]
 8002140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002144:	4637      	mov	r7, r6
 8002146:	42bb      	cmp	r3, r7
 8002148:	460e      	mov	r6, r1
 800214a:	d9f4      	bls.n	8002136 <_printf_i+0x11a>
 800214c:	2b08      	cmp	r3, #8
 800214e:	d10b      	bne.n	8002168 <_printf_i+0x14c>
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	07de      	lsls	r6, r3, #31
 8002154:	d508      	bpl.n	8002168 <_printf_i+0x14c>
 8002156:	6923      	ldr	r3, [r4, #16]
 8002158:	6861      	ldr	r1, [r4, #4]
 800215a:	4299      	cmp	r1, r3
 800215c:	bfde      	ittt	le
 800215e:	2330      	movle	r3, #48	; 0x30
 8002160:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002164:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002168:	1b52      	subs	r2, r2, r5
 800216a:	6122      	str	r2, [r4, #16]
 800216c:	f8cd a000 	str.w	sl, [sp]
 8002170:	464b      	mov	r3, r9
 8002172:	aa03      	add	r2, sp, #12
 8002174:	4621      	mov	r1, r4
 8002176:	4640      	mov	r0, r8
 8002178:	f7ff fee2 	bl	8001f40 <_printf_common>
 800217c:	3001      	adds	r0, #1
 800217e:	d14c      	bne.n	800221a <_printf_i+0x1fe>
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	b004      	add	sp, #16
 8002186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800218a:	4835      	ldr	r0, [pc, #212]	; (8002260 <_printf_i+0x244>)
 800218c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002190:	6829      	ldr	r1, [r5, #0]
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	f851 6b04 	ldr.w	r6, [r1], #4
 8002198:	6029      	str	r1, [r5, #0]
 800219a:	061d      	lsls	r5, r3, #24
 800219c:	d514      	bpl.n	80021c8 <_printf_i+0x1ac>
 800219e:	07df      	lsls	r7, r3, #31
 80021a0:	bf44      	itt	mi
 80021a2:	f043 0320 	orrmi.w	r3, r3, #32
 80021a6:	6023      	strmi	r3, [r4, #0]
 80021a8:	b91e      	cbnz	r6, 80021b2 <_printf_i+0x196>
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	f023 0320 	bic.w	r3, r3, #32
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	2310      	movs	r3, #16
 80021b4:	e7b0      	b.n	8002118 <_printf_i+0xfc>
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	f043 0320 	orr.w	r3, r3, #32
 80021bc:	6023      	str	r3, [r4, #0]
 80021be:	2378      	movs	r3, #120	; 0x78
 80021c0:	4828      	ldr	r0, [pc, #160]	; (8002264 <_printf_i+0x248>)
 80021c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021c6:	e7e3      	b.n	8002190 <_printf_i+0x174>
 80021c8:	0659      	lsls	r1, r3, #25
 80021ca:	bf48      	it	mi
 80021cc:	b2b6      	uxthmi	r6, r6
 80021ce:	e7e6      	b.n	800219e <_printf_i+0x182>
 80021d0:	4615      	mov	r5, r2
 80021d2:	e7bb      	b.n	800214c <_printf_i+0x130>
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	6826      	ldr	r6, [r4, #0]
 80021d8:	6961      	ldr	r1, [r4, #20]
 80021da:	1d18      	adds	r0, r3, #4
 80021dc:	6028      	str	r0, [r5, #0]
 80021de:	0635      	lsls	r5, r6, #24
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	d501      	bpl.n	80021e8 <_printf_i+0x1cc>
 80021e4:	6019      	str	r1, [r3, #0]
 80021e6:	e002      	b.n	80021ee <_printf_i+0x1d2>
 80021e8:	0670      	lsls	r0, r6, #25
 80021ea:	d5fb      	bpl.n	80021e4 <_printf_i+0x1c8>
 80021ec:	8019      	strh	r1, [r3, #0]
 80021ee:	2300      	movs	r3, #0
 80021f0:	6123      	str	r3, [r4, #16]
 80021f2:	4615      	mov	r5, r2
 80021f4:	e7ba      	b.n	800216c <_printf_i+0x150>
 80021f6:	682b      	ldr	r3, [r5, #0]
 80021f8:	1d1a      	adds	r2, r3, #4
 80021fa:	602a      	str	r2, [r5, #0]
 80021fc:	681d      	ldr	r5, [r3, #0]
 80021fe:	6862      	ldr	r2, [r4, #4]
 8002200:	2100      	movs	r1, #0
 8002202:	4628      	mov	r0, r5
 8002204:	f7fd fff4 	bl	80001f0 <memchr>
 8002208:	b108      	cbz	r0, 800220e <_printf_i+0x1f2>
 800220a:	1b40      	subs	r0, r0, r5
 800220c:	6060      	str	r0, [r4, #4]
 800220e:	6863      	ldr	r3, [r4, #4]
 8002210:	6123      	str	r3, [r4, #16]
 8002212:	2300      	movs	r3, #0
 8002214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002218:	e7a8      	b.n	800216c <_printf_i+0x150>
 800221a:	6923      	ldr	r3, [r4, #16]
 800221c:	462a      	mov	r2, r5
 800221e:	4649      	mov	r1, r9
 8002220:	4640      	mov	r0, r8
 8002222:	47d0      	blx	sl
 8002224:	3001      	adds	r0, #1
 8002226:	d0ab      	beq.n	8002180 <_printf_i+0x164>
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	079b      	lsls	r3, r3, #30
 800222c:	d413      	bmi.n	8002256 <_printf_i+0x23a>
 800222e:	68e0      	ldr	r0, [r4, #12]
 8002230:	9b03      	ldr	r3, [sp, #12]
 8002232:	4298      	cmp	r0, r3
 8002234:	bfb8      	it	lt
 8002236:	4618      	movlt	r0, r3
 8002238:	e7a4      	b.n	8002184 <_printf_i+0x168>
 800223a:	2301      	movs	r3, #1
 800223c:	4632      	mov	r2, r6
 800223e:	4649      	mov	r1, r9
 8002240:	4640      	mov	r0, r8
 8002242:	47d0      	blx	sl
 8002244:	3001      	adds	r0, #1
 8002246:	d09b      	beq.n	8002180 <_printf_i+0x164>
 8002248:	3501      	adds	r5, #1
 800224a:	68e3      	ldr	r3, [r4, #12]
 800224c:	9903      	ldr	r1, [sp, #12]
 800224e:	1a5b      	subs	r3, r3, r1
 8002250:	42ab      	cmp	r3, r5
 8002252:	dcf2      	bgt.n	800223a <_printf_i+0x21e>
 8002254:	e7eb      	b.n	800222e <_printf_i+0x212>
 8002256:	2500      	movs	r5, #0
 8002258:	f104 0619 	add.w	r6, r4, #25
 800225c:	e7f5      	b.n	800224a <_printf_i+0x22e>
 800225e:	bf00      	nop
 8002260:	080025d0 	.word	0x080025d0
 8002264:	080025e1 	.word	0x080025e1

08002268 <memcpy>:
 8002268:	440a      	add	r2, r1
 800226a:	4291      	cmp	r1, r2
 800226c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002270:	d100      	bne.n	8002274 <memcpy+0xc>
 8002272:	4770      	bx	lr
 8002274:	b510      	push	{r4, lr}
 8002276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800227a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800227e:	4291      	cmp	r1, r2
 8002280:	d1f9      	bne.n	8002276 <memcpy+0xe>
 8002282:	bd10      	pop	{r4, pc}

08002284 <memmove>:
 8002284:	4288      	cmp	r0, r1
 8002286:	b510      	push	{r4, lr}
 8002288:	eb01 0402 	add.w	r4, r1, r2
 800228c:	d902      	bls.n	8002294 <memmove+0x10>
 800228e:	4284      	cmp	r4, r0
 8002290:	4623      	mov	r3, r4
 8002292:	d807      	bhi.n	80022a4 <memmove+0x20>
 8002294:	1e43      	subs	r3, r0, #1
 8002296:	42a1      	cmp	r1, r4
 8002298:	d008      	beq.n	80022ac <memmove+0x28>
 800229a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800229e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80022a2:	e7f8      	b.n	8002296 <memmove+0x12>
 80022a4:	4402      	add	r2, r0
 80022a6:	4601      	mov	r1, r0
 80022a8:	428a      	cmp	r2, r1
 80022aa:	d100      	bne.n	80022ae <memmove+0x2a>
 80022ac:	bd10      	pop	{r4, pc}
 80022ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80022b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80022b6:	e7f7      	b.n	80022a8 <memmove+0x24>

080022b8 <_free_r>:
 80022b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022ba:	2900      	cmp	r1, #0
 80022bc:	d044      	beq.n	8002348 <_free_r+0x90>
 80022be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022c2:	9001      	str	r0, [sp, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f1a1 0404 	sub.w	r4, r1, #4
 80022ca:	bfb8      	it	lt
 80022cc:	18e4      	addlt	r4, r4, r3
 80022ce:	f000 f913 	bl	80024f8 <__malloc_lock>
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <_free_r+0x94>)
 80022d4:	9801      	ldr	r0, [sp, #4]
 80022d6:	6813      	ldr	r3, [r2, #0]
 80022d8:	b933      	cbnz	r3, 80022e8 <_free_r+0x30>
 80022da:	6063      	str	r3, [r4, #4]
 80022dc:	6014      	str	r4, [r2, #0]
 80022de:	b003      	add	sp, #12
 80022e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80022e4:	f000 b90e 	b.w	8002504 <__malloc_unlock>
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	d908      	bls.n	80022fe <_free_r+0x46>
 80022ec:	6825      	ldr	r5, [r4, #0]
 80022ee:	1961      	adds	r1, r4, r5
 80022f0:	428b      	cmp	r3, r1
 80022f2:	bf01      	itttt	eq
 80022f4:	6819      	ldreq	r1, [r3, #0]
 80022f6:	685b      	ldreq	r3, [r3, #4]
 80022f8:	1949      	addeq	r1, r1, r5
 80022fa:	6021      	streq	r1, [r4, #0]
 80022fc:	e7ed      	b.n	80022da <_free_r+0x22>
 80022fe:	461a      	mov	r2, r3
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	b10b      	cbz	r3, 8002308 <_free_r+0x50>
 8002304:	42a3      	cmp	r3, r4
 8002306:	d9fa      	bls.n	80022fe <_free_r+0x46>
 8002308:	6811      	ldr	r1, [r2, #0]
 800230a:	1855      	adds	r5, r2, r1
 800230c:	42a5      	cmp	r5, r4
 800230e:	d10b      	bne.n	8002328 <_free_r+0x70>
 8002310:	6824      	ldr	r4, [r4, #0]
 8002312:	4421      	add	r1, r4
 8002314:	1854      	adds	r4, r2, r1
 8002316:	42a3      	cmp	r3, r4
 8002318:	6011      	str	r1, [r2, #0]
 800231a:	d1e0      	bne.n	80022de <_free_r+0x26>
 800231c:	681c      	ldr	r4, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	6053      	str	r3, [r2, #4]
 8002322:	4421      	add	r1, r4
 8002324:	6011      	str	r1, [r2, #0]
 8002326:	e7da      	b.n	80022de <_free_r+0x26>
 8002328:	d902      	bls.n	8002330 <_free_r+0x78>
 800232a:	230c      	movs	r3, #12
 800232c:	6003      	str	r3, [r0, #0]
 800232e:	e7d6      	b.n	80022de <_free_r+0x26>
 8002330:	6825      	ldr	r5, [r4, #0]
 8002332:	1961      	adds	r1, r4, r5
 8002334:	428b      	cmp	r3, r1
 8002336:	bf04      	itt	eq
 8002338:	6819      	ldreq	r1, [r3, #0]
 800233a:	685b      	ldreq	r3, [r3, #4]
 800233c:	6063      	str	r3, [r4, #4]
 800233e:	bf04      	itt	eq
 8002340:	1949      	addeq	r1, r1, r5
 8002342:	6021      	streq	r1, [r4, #0]
 8002344:	6054      	str	r4, [r2, #4]
 8002346:	e7ca      	b.n	80022de <_free_r+0x26>
 8002348:	b003      	add	sp, #12
 800234a:	bd30      	pop	{r4, r5, pc}
 800234c:	200000b8 	.word	0x200000b8

08002350 <sbrk_aligned>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	4e0e      	ldr	r6, [pc, #56]	; (800238c <sbrk_aligned+0x3c>)
 8002354:	460c      	mov	r4, r1
 8002356:	6831      	ldr	r1, [r6, #0]
 8002358:	4605      	mov	r5, r0
 800235a:	b911      	cbnz	r1, 8002362 <sbrk_aligned+0x12>
 800235c:	f000 f8bc 	bl	80024d8 <_sbrk_r>
 8002360:	6030      	str	r0, [r6, #0]
 8002362:	4621      	mov	r1, r4
 8002364:	4628      	mov	r0, r5
 8002366:	f000 f8b7 	bl	80024d8 <_sbrk_r>
 800236a:	1c43      	adds	r3, r0, #1
 800236c:	d00a      	beq.n	8002384 <sbrk_aligned+0x34>
 800236e:	1cc4      	adds	r4, r0, #3
 8002370:	f024 0403 	bic.w	r4, r4, #3
 8002374:	42a0      	cmp	r0, r4
 8002376:	d007      	beq.n	8002388 <sbrk_aligned+0x38>
 8002378:	1a21      	subs	r1, r4, r0
 800237a:	4628      	mov	r0, r5
 800237c:	f000 f8ac 	bl	80024d8 <_sbrk_r>
 8002380:	3001      	adds	r0, #1
 8002382:	d101      	bne.n	8002388 <sbrk_aligned+0x38>
 8002384:	f04f 34ff 	mov.w	r4, #4294967295
 8002388:	4620      	mov	r0, r4
 800238a:	bd70      	pop	{r4, r5, r6, pc}
 800238c:	200000bc 	.word	0x200000bc

08002390 <_malloc_r>:
 8002390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002394:	1ccd      	adds	r5, r1, #3
 8002396:	f025 0503 	bic.w	r5, r5, #3
 800239a:	3508      	adds	r5, #8
 800239c:	2d0c      	cmp	r5, #12
 800239e:	bf38      	it	cc
 80023a0:	250c      	movcc	r5, #12
 80023a2:	2d00      	cmp	r5, #0
 80023a4:	4607      	mov	r7, r0
 80023a6:	db01      	blt.n	80023ac <_malloc_r+0x1c>
 80023a8:	42a9      	cmp	r1, r5
 80023aa:	d905      	bls.n	80023b8 <_malloc_r+0x28>
 80023ac:	230c      	movs	r3, #12
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	2600      	movs	r6, #0
 80023b2:	4630      	mov	r0, r6
 80023b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023b8:	4e2e      	ldr	r6, [pc, #184]	; (8002474 <_malloc_r+0xe4>)
 80023ba:	f000 f89d 	bl	80024f8 <__malloc_lock>
 80023be:	6833      	ldr	r3, [r6, #0]
 80023c0:	461c      	mov	r4, r3
 80023c2:	bb34      	cbnz	r4, 8002412 <_malloc_r+0x82>
 80023c4:	4629      	mov	r1, r5
 80023c6:	4638      	mov	r0, r7
 80023c8:	f7ff ffc2 	bl	8002350 <sbrk_aligned>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	4604      	mov	r4, r0
 80023d0:	d14d      	bne.n	800246e <_malloc_r+0xde>
 80023d2:	6834      	ldr	r4, [r6, #0]
 80023d4:	4626      	mov	r6, r4
 80023d6:	2e00      	cmp	r6, #0
 80023d8:	d140      	bne.n	800245c <_malloc_r+0xcc>
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	4631      	mov	r1, r6
 80023de:	4638      	mov	r0, r7
 80023e0:	eb04 0803 	add.w	r8, r4, r3
 80023e4:	f000 f878 	bl	80024d8 <_sbrk_r>
 80023e8:	4580      	cmp	r8, r0
 80023ea:	d13a      	bne.n	8002462 <_malloc_r+0xd2>
 80023ec:	6821      	ldr	r1, [r4, #0]
 80023ee:	3503      	adds	r5, #3
 80023f0:	1a6d      	subs	r5, r5, r1
 80023f2:	f025 0503 	bic.w	r5, r5, #3
 80023f6:	3508      	adds	r5, #8
 80023f8:	2d0c      	cmp	r5, #12
 80023fa:	bf38      	it	cc
 80023fc:	250c      	movcc	r5, #12
 80023fe:	4629      	mov	r1, r5
 8002400:	4638      	mov	r0, r7
 8002402:	f7ff ffa5 	bl	8002350 <sbrk_aligned>
 8002406:	3001      	adds	r0, #1
 8002408:	d02b      	beq.n	8002462 <_malloc_r+0xd2>
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	442b      	add	r3, r5
 800240e:	6023      	str	r3, [r4, #0]
 8002410:	e00e      	b.n	8002430 <_malloc_r+0xa0>
 8002412:	6822      	ldr	r2, [r4, #0]
 8002414:	1b52      	subs	r2, r2, r5
 8002416:	d41e      	bmi.n	8002456 <_malloc_r+0xc6>
 8002418:	2a0b      	cmp	r2, #11
 800241a:	d916      	bls.n	800244a <_malloc_r+0xba>
 800241c:	1961      	adds	r1, r4, r5
 800241e:	42a3      	cmp	r3, r4
 8002420:	6025      	str	r5, [r4, #0]
 8002422:	bf18      	it	ne
 8002424:	6059      	strne	r1, [r3, #4]
 8002426:	6863      	ldr	r3, [r4, #4]
 8002428:	bf08      	it	eq
 800242a:	6031      	streq	r1, [r6, #0]
 800242c:	5162      	str	r2, [r4, r5]
 800242e:	604b      	str	r3, [r1, #4]
 8002430:	4638      	mov	r0, r7
 8002432:	f104 060b 	add.w	r6, r4, #11
 8002436:	f000 f865 	bl	8002504 <__malloc_unlock>
 800243a:	f026 0607 	bic.w	r6, r6, #7
 800243e:	1d23      	adds	r3, r4, #4
 8002440:	1af2      	subs	r2, r6, r3
 8002442:	d0b6      	beq.n	80023b2 <_malloc_r+0x22>
 8002444:	1b9b      	subs	r3, r3, r6
 8002446:	50a3      	str	r3, [r4, r2]
 8002448:	e7b3      	b.n	80023b2 <_malloc_r+0x22>
 800244a:	6862      	ldr	r2, [r4, #4]
 800244c:	42a3      	cmp	r3, r4
 800244e:	bf0c      	ite	eq
 8002450:	6032      	streq	r2, [r6, #0]
 8002452:	605a      	strne	r2, [r3, #4]
 8002454:	e7ec      	b.n	8002430 <_malloc_r+0xa0>
 8002456:	4623      	mov	r3, r4
 8002458:	6864      	ldr	r4, [r4, #4]
 800245a:	e7b2      	b.n	80023c2 <_malloc_r+0x32>
 800245c:	4634      	mov	r4, r6
 800245e:	6876      	ldr	r6, [r6, #4]
 8002460:	e7b9      	b.n	80023d6 <_malloc_r+0x46>
 8002462:	230c      	movs	r3, #12
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4638      	mov	r0, r7
 8002468:	f000 f84c 	bl	8002504 <__malloc_unlock>
 800246c:	e7a1      	b.n	80023b2 <_malloc_r+0x22>
 800246e:	6025      	str	r5, [r4, #0]
 8002470:	e7de      	b.n	8002430 <_malloc_r+0xa0>
 8002472:	bf00      	nop
 8002474:	200000b8 	.word	0x200000b8

08002478 <_realloc_r>:
 8002478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800247c:	4680      	mov	r8, r0
 800247e:	4614      	mov	r4, r2
 8002480:	460e      	mov	r6, r1
 8002482:	b921      	cbnz	r1, 800248e <_realloc_r+0x16>
 8002484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002488:	4611      	mov	r1, r2
 800248a:	f7ff bf81 	b.w	8002390 <_malloc_r>
 800248e:	b92a      	cbnz	r2, 800249c <_realloc_r+0x24>
 8002490:	f7ff ff12 	bl	80022b8 <_free_r>
 8002494:	4625      	mov	r5, r4
 8002496:	4628      	mov	r0, r5
 8002498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800249c:	f000 f838 	bl	8002510 <_malloc_usable_size_r>
 80024a0:	4284      	cmp	r4, r0
 80024a2:	4607      	mov	r7, r0
 80024a4:	d802      	bhi.n	80024ac <_realloc_r+0x34>
 80024a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80024aa:	d812      	bhi.n	80024d2 <_realloc_r+0x5a>
 80024ac:	4621      	mov	r1, r4
 80024ae:	4640      	mov	r0, r8
 80024b0:	f7ff ff6e 	bl	8002390 <_malloc_r>
 80024b4:	4605      	mov	r5, r0
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0ed      	beq.n	8002496 <_realloc_r+0x1e>
 80024ba:	42bc      	cmp	r4, r7
 80024bc:	4622      	mov	r2, r4
 80024be:	4631      	mov	r1, r6
 80024c0:	bf28      	it	cs
 80024c2:	463a      	movcs	r2, r7
 80024c4:	f7ff fed0 	bl	8002268 <memcpy>
 80024c8:	4631      	mov	r1, r6
 80024ca:	4640      	mov	r0, r8
 80024cc:	f7ff fef4 	bl	80022b8 <_free_r>
 80024d0:	e7e1      	b.n	8002496 <_realloc_r+0x1e>
 80024d2:	4635      	mov	r5, r6
 80024d4:	e7df      	b.n	8002496 <_realloc_r+0x1e>
	...

080024d8 <_sbrk_r>:
 80024d8:	b538      	push	{r3, r4, r5, lr}
 80024da:	4d06      	ldr	r5, [pc, #24]	; (80024f4 <_sbrk_r+0x1c>)
 80024dc:	2300      	movs	r3, #0
 80024de:	4604      	mov	r4, r0
 80024e0:	4608      	mov	r0, r1
 80024e2:	602b      	str	r3, [r5, #0]
 80024e4:	f7ff fa1c 	bl	8001920 <_sbrk>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	d102      	bne.n	80024f2 <_sbrk_r+0x1a>
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	b103      	cbz	r3, 80024f2 <_sbrk_r+0x1a>
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	bd38      	pop	{r3, r4, r5, pc}
 80024f4:	200000c0 	.word	0x200000c0

080024f8 <__malloc_lock>:
 80024f8:	4801      	ldr	r0, [pc, #4]	; (8002500 <__malloc_lock+0x8>)
 80024fa:	f000 b811 	b.w	8002520 <__retarget_lock_acquire_recursive>
 80024fe:	bf00      	nop
 8002500:	200000c4 	.word	0x200000c4

08002504 <__malloc_unlock>:
 8002504:	4801      	ldr	r0, [pc, #4]	; (800250c <__malloc_unlock+0x8>)
 8002506:	f000 b80c 	b.w	8002522 <__retarget_lock_release_recursive>
 800250a:	bf00      	nop
 800250c:	200000c4 	.word	0x200000c4

08002510 <_malloc_usable_size_r>:
 8002510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002514:	1f18      	subs	r0, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	bfbc      	itt	lt
 800251a:	580b      	ldrlt	r3, [r1, r0]
 800251c:	18c0      	addlt	r0, r0, r3
 800251e:	4770      	bx	lr

08002520 <__retarget_lock_acquire_recursive>:
 8002520:	4770      	bx	lr

08002522 <__retarget_lock_release_recursive>:
 8002522:	4770      	bx	lr

08002524 <_init>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr

08002530 <_fini>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	bf00      	nop
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr
